// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Post     Post[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  ownedCards   BusinessCard[]     @relation("BusinessCardToUserOwner")
  userCards    UserBusinessCard[]
  BusinessCard BusinessCard[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model BusinessCard {
  id          String   @id @default(cuid())
  autoId      String // Unique identifier for the business card
  name        String
  directPhone String
  email       String
  mainPhone   String
  mainFax     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String? // User who claimed the business card

  owner            User?              @relation("BusinessCardToUserOwner", fields: [ownerId], references: [id])
  User             User?              @relation(fields: [userId], references: [id])
  userId           String?
  UserBusinessCard UserBusinessCard[]

  @@map(name: "business_cards")
}

model UserBusinessCard {
  id             String   @id @default(cuid())
  userId         String
  businessCardId String
  type           String // Can be 'uploaded', 'claimed', or 'favorited'
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")

  user         User         @relation(fields: [userId], references: [id])
  businessCard BusinessCard @relation(fields: [businessCardId], references: [id])

  @@unique([userId, businessCardId, type])
  @@map(name: "user_business_cards")
}
