# Code generated by "wunderctl"; DO NOT EDIT.

schema {
  query: Query
  mutation: Mutation
}

directive @weather_cacheControl(maxAge: Int, scope: weather_CacheControlScope) on FIELD_DEFINITION | INTERFACE | OBJECT

"""
The @removeNullVariables directive allows you to remove variables with null value from your GraphQL Query or Mutation Operations.

A potential use-case could be that you have a graphql upstream which is not accepting null values for variables.
By enabling this directive all variables with null values will be removed from upstream query.

query ($say: String, $name: String) @removeNullVariables {
	hello(say: $say, name: $name)
}

Directive will transform variables json and remove top level null values.
{ "say": null, "name": "world" }

So upstream will receive the following variables:

{ "name": "world" }
"""
directive @removeNullVariables on QUERY | MUTATION

directive @hooksVariable on VARIABLE_DEFINITION

directive @jsonSchema(
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  title: String
  """
  The value of both of these keywords MUST be a string.
  
  Both of these keywords can be used to decorate a user interface with
  information about the data produced by this user interface.  A title
  will preferably be short, whereas a description will provide
  explanation about the purpose of the instance described by this
  schema.
  """
  description: String
  """
  The value of "multipleOf" MUST be a number, strictly greater than 0.
  
  A numeric instance is valid only if division by this keyword's value
  results in an integer.
  """
  multipleOf: Int
  """
  The value of "maximum" MUST be a number, representing an inclusive
  upper limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is less than or exactly equal to "maximum".
  """
  maximum: Int
  """
  The value of "exclusiveMaximum" MUST be number, representing an
  exclusive upper limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly less than (not equal to) "exclusiveMaximum".
  """
  exclusiveMaximum: Int
  """
  The value of "minimum" MUST be a number, representing an inclusive
  lower limit for a numeric instance.
  
  If the instance is a number, then this keyword validates only if the
  instance is greater than or exactly equal to "minimum".
  """
  minimum: Int
  """
  The value of "exclusiveMinimum" MUST be number, representing an
  exclusive lower limit for a numeric instance.
  
  If the instance is a number, then the instance is valid only if it
  has a value strictly greater than (not equal to) "exclusiveMinimum".
  """
  exclusiveMinimum: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is less
  than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  """
  maxLength: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  A string instance is valid against this keyword if its length is
  greater than, or equal to, the value of this keyword.
  
  The length of a string instance is defined as the number of its
  characters as defined by RFC 7159 [RFC7159].
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minLength: Int
  """
  The value of this keyword MUST be a string.  This string SHOULD be a
  valid regular expression, according to the ECMA 262 regular
  expression dialect.
  
  A string instance is considered valid if the regular expression
  matches the instance successfully.  Recall: regular expressions are
  not implicitly anchored.
  """
  pattern: String
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "maxItems" if its size is less
  than, or equal to, the value of this keyword.
  """
  maxItems: Int
  """
  The value of this keyword MUST be a non-negative integer.
  
  An array instance is valid against "minItems" if its size is greater
  than, or equal to, the value of this keyword.
  
  Omitting this keyword has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this keyword MUST be a boolean.
  
  If this keyword has boolean value false, the instance validates
  successfully.  If it has boolean value true, the instance validates
  successfully if all of its elements are unique.
  
  Omitting this keyword has the same behavior as a value of false.
  """
  uniqueItems: Boolean
  commonPattern: COMMON_REGEX_PATTERN
  """Optional field to apply the JSON schema to"""
  on: String
) repeatable on VARIABLE_DEFINITION

directive @rbac(
  "the user must match all roles"
  requireMatchAll: [WG_ROLE]
  "the user must match at least one of the roles"
  requireMatchAny: [WG_ROLE]
  "the user must not match all of the roles"
  denyMatchAll: [WG_ROLE]
  "the user must not match any of the roles"
  denyMatchAny: [WG_ROLE]
) on QUERY | MUTATION | SUBSCRIPTION

"""
The @fromClaim directive sets the variable to the value retrieved from the given a claim.
Adding this directive makes the operation require authentication.
"""
directive @fromClaim(name: WG_CLAIM, on: String = "") repeatable on VARIABLE_DEFINITION

"""
The directive @injectCurrentDateTime injects a DateTime string of the current date and time into the variable.
This variable MUST be a string compatible scalar. 

The default format, is: ISO 8601
If no format is chosen, the default format is used.
Custom formats are allowed by specifying a format conforming to the Golang specification for specifying a date time format.
"""
directive @injectCurrentDateTime(
  format: WunderGraphDateTimeFormat = ISO8601
  """
  customFormat must conform to the Golang specification for specifying a date time format
  """
  customFormat: String
  on: String = ""
) repeatable on VARIABLE_DEFINITION

"""
The directive @injectGeneratedUUID injects a generated UUID into the variable.
This variable MUST be a string.
At the same time, it removes the variable from the input definition,
disallowing the user to supply it.

This means, the UUID is 100% generated server-side and can be considered untempered.
"""
directive @injectGeneratedUUID(on: String = "") repeatable on VARIABLE_DEFINITION

"""
The @internalOperation Directive marks an Operation as internal.
By doing so, the Operation is no longer accessible from the public API.
It can only be accessed by internal services, like hooks.
"""
directive @internalOperation on QUERY | MUTATION | SUBSCRIPTION

"""
The directive @injectEnvironmentVariable allows you to inject an environment variable into the variable definition.
"""
directive @injectEnvironmentVariable(name: String!, on: String = "") repeatable on VARIABLE_DEFINITION

"""
The @export directive instructs the Execution Planner to export the field during the execution into the variable of the 'as' argument.
As the execution is depth first, a field can only be used after it has been exported.
Additionally, a field can only be used after using the '_join' field or on a different data source.
It's not possible to export a field and use it in for the same data source.

Note that the @export directive only works on fields that return a single value.
It's not possible to export a list or object field.
"""
directive @export(
  """The argument 'as' is the name of the variable to export the field to."""
  as: String!
) on FIELD

"""
The directive @internal marks a variable definition as internal so that clients can't access it.
The field is also not visible in the public API.
It's only being used as an internal variable to export fields into.
"""
directive @internal on VARIABLE_DEFINITION

"""
The @transform directive allows to apply transformations to the response.
By applying the directive, the shape of the response can be altered,
which will also modify the JSON-Schema of the response.
That is, you will keep full type safety and code-generation for transformed fields.
"""
directive @transform(
  """
  Using the 'get' transformation allows you to extract a nested field using a JSON path.
  This is useful to unnest data, e.g. when using the '_join' field, which adds an extra layer of nesting.
  
  Example:
  
  query GetName {
      name: me @transform(get: "info.name") {
          info {
              name
          }
      }
  }
  
  Before the transformation, the resolve looks like this:
  
  {
      "name": {
          "info": {
              "name": "John Doe"
          }
      }
  }
  
  With the transformation applied, the response will be reshaped like this:
  
  {
      "name": "John Doe"
  }
  """
  get: String
) on FIELD

"""
The @requireAuthentication Directive marks an Operation to require authentication.
Without authentication, the operation will return an Unauthorized error with status code 401.
"""
directive @requireAuthentication on QUERY | MUTATION | SUBSCRIPTION

type countries_Continent {
  code: ID!
  countries: [countries_Country!]!
  name: String!
  _join: Query!
}

input countries_ContinentFilterInput {
  code: countries_StringQueryOperatorInput
}

type countries_Country {
  awsRegion: String!
  capital: String
  code: ID!
  continent: countries_Continent!
  currencies: [String!]!
  currency: String
  emoji: String!
  emojiU: String!
  languages: [countries_Language!]!
  name(lang: String): String!
  native: String!
  phone: String!
  phones: [String!]!
  states: [countries_State!]!
  subdivisions: [countries_Subdivision!]!
  _join: Query!
}

input countries_CountryFilterInput {
  code: countries_StringQueryOperatorInput
  continent: countries_StringQueryOperatorInput
  currency: countries_StringQueryOperatorInput
  name: countries_StringQueryOperatorInput
}

type countries_Language {
  code: ID!
  name: String!
  native: String!
  rtl: Boolean!
  _join: Query!
}

input countries_LanguageFilterInput {
  code: countries_StringQueryOperatorInput
}

type Query {
  countries_continent(code: ID!): countries_Continent
  countries_continents(filter: countries_ContinentFilterInput = {}): [countries_Continent!]!
  countries_countries(filter: countries_CountryFilterInput = {}): [countries_Country!]!
  countries_country(code: ID!): countries_Country
  countries_language(code: ID!): countries_Language
  countries_languages(filter: countries_LanguageFilterInput = {}): [countries_Language!]!
  db_findFirstAccount(where: db_AccountWhereInput, orderBy: [db_AccountOrderByWithRelationInput], cursor: db_AccountWhereUniqueInput, take: Int, skip: Int, distinct: [db_AccountScalarFieldEnum]): db_Account
  db_findFirstAccountOrThrow(where: db_AccountWhereInput, orderBy: [db_AccountOrderByWithRelationInput], cursor: db_AccountWhereUniqueInput, take: Int, skip: Int, distinct: [db_AccountScalarFieldEnum]): db_Account
  db_findManyAccount(where: db_AccountWhereInput, orderBy: [db_AccountOrderByWithRelationInput], cursor: db_AccountWhereUniqueInput, take: Int, skip: Int, distinct: [db_AccountScalarFieldEnum]): [db_Account]!
  db_aggregateAccount(where: db_AccountWhereInput, orderBy: [db_AccountOrderByWithRelationInput], cursor: db_AccountWhereUniqueInput, take: Int, skip: Int): db_AggregateAccount!
  db_groupByAccount(where: db_AccountWhereInput, orderBy: [db_AccountOrderByWithAggregationInput], by: [db_AccountScalarFieldEnum]!, having: db_AccountScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_AccountGroupByOutputType]!
  db_findUniqueAccount(where: db_AccountWhereUniqueInput!): db_Account
  db_findUniqueAccountOrThrow(where: db_AccountWhereUniqueInput!): db_Account
  db_findFirstSession(where: db_SessionWhereInput, orderBy: [db_SessionOrderByWithRelationInput], cursor: db_SessionWhereUniqueInput, take: Int, skip: Int, distinct: [db_SessionScalarFieldEnum]): db_Session
  db_findFirstSessionOrThrow(where: db_SessionWhereInput, orderBy: [db_SessionOrderByWithRelationInput], cursor: db_SessionWhereUniqueInput, take: Int, skip: Int, distinct: [db_SessionScalarFieldEnum]): db_Session
  db_findManySession(where: db_SessionWhereInput, orderBy: [db_SessionOrderByWithRelationInput], cursor: db_SessionWhereUniqueInput, take: Int, skip: Int, distinct: [db_SessionScalarFieldEnum]): [db_Session]!
  db_aggregateSession(where: db_SessionWhereInput, orderBy: [db_SessionOrderByWithRelationInput], cursor: db_SessionWhereUniqueInput, take: Int, skip: Int): db_AggregateSession!
  db_groupBySession(where: db_SessionWhereInput, orderBy: [db_SessionOrderByWithAggregationInput], by: [db_SessionScalarFieldEnum]!, having: db_SessionScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_SessionGroupByOutputType]!
  db_findUniqueSession(where: db_SessionWhereUniqueInput!): db_Session
  db_findUniqueSessionOrThrow(where: db_SessionWhereUniqueInput!): db_Session
  db_findFirstVerificationToken(where: db_VerificationTokenWhereInput, orderBy: [db_VerificationTokenOrderByWithRelationInput], cursor: db_VerificationTokenWhereUniqueInput, take: Int, skip: Int, distinct: [db_VerificationTokenScalarFieldEnum]): db_VerificationToken
  db_findFirstVerificationTokenOrThrow(where: db_VerificationTokenWhereInput, orderBy: [db_VerificationTokenOrderByWithRelationInput], cursor: db_VerificationTokenWhereUniqueInput, take: Int, skip: Int, distinct: [db_VerificationTokenScalarFieldEnum]): db_VerificationToken
  db_findManyVerificationToken(where: db_VerificationTokenWhereInput, orderBy: [db_VerificationTokenOrderByWithRelationInput], cursor: db_VerificationTokenWhereUniqueInput, take: Int, skip: Int, distinct: [db_VerificationTokenScalarFieldEnum]): [db_VerificationToken]!
  db_aggregateVerificationToken(where: db_VerificationTokenWhereInput, orderBy: [db_VerificationTokenOrderByWithRelationInput], cursor: db_VerificationTokenWhereUniqueInput, take: Int, skip: Int): db_AggregateVerificationToken!
  db_groupByVerificationToken(where: db_VerificationTokenWhereInput, orderBy: [db_VerificationTokenOrderByWithAggregationInput], by: [db_VerificationTokenScalarFieldEnum]!, having: db_VerificationTokenScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_VerificationTokenGroupByOutputType]!
  db_findUniqueVerificationToken(where: db_VerificationTokenWhereUniqueInput!): db_VerificationToken
  db_findUniqueVerificationTokenOrThrow(where: db_VerificationTokenWhereUniqueInput!): db_VerificationToken
  db_findFirstUser(where: db_UserWhereInput, orderBy: [db_UserOrderByWithRelationInput], cursor: db_UserWhereUniqueInput, take: Int, skip: Int, distinct: [db_UserScalarFieldEnum]): db_User
  db_findFirstUserOrThrow(where: db_UserWhereInput, orderBy: [db_UserOrderByWithRelationInput], cursor: db_UserWhereUniqueInput, take: Int, skip: Int, distinct: [db_UserScalarFieldEnum]): db_User
  db_findManyUser(where: db_UserWhereInput, orderBy: [db_UserOrderByWithRelationInput], cursor: db_UserWhereUniqueInput, take: Int, skip: Int, distinct: [db_UserScalarFieldEnum]): [db_User]!
  db_aggregateUser(where: db_UserWhereInput, orderBy: [db_UserOrderByWithRelationInput], cursor: db_UserWhereUniqueInput, take: Int, skip: Int): db_AggregateUser!
  db_groupByUser(where: db_UserWhereInput, orderBy: [db_UserOrderByWithAggregationInput], by: [db_UserScalarFieldEnum]!, having: db_UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_UserGroupByOutputType]!
  db_findUniqueUser(where: db_UserWhereUniqueInput!): db_User
  db_findUniqueUserOrThrow(where: db_UserWhereUniqueInput!): db_User
  db_findFirstMatch(where: db_MatchWhereInput, orderBy: [db_MatchOrderByWithRelationInput], cursor: db_MatchWhereUniqueInput, take: Int, skip: Int, distinct: [db_MatchScalarFieldEnum]): db_Match
  db_findFirstMatchOrThrow(where: db_MatchWhereInput, orderBy: [db_MatchOrderByWithRelationInput], cursor: db_MatchWhereUniqueInput, take: Int, skip: Int, distinct: [db_MatchScalarFieldEnum]): db_Match
  db_findManyMatch(where: db_MatchWhereInput, orderBy: [db_MatchOrderByWithRelationInput], cursor: db_MatchWhereUniqueInput, take: Int, skip: Int, distinct: [db_MatchScalarFieldEnum]): [db_Match]!
  db_aggregateMatch(where: db_MatchWhereInput, orderBy: [db_MatchOrderByWithRelationInput], cursor: db_MatchWhereUniqueInput, take: Int, skip: Int): db_AggregateMatch!
  db_groupByMatch(where: db_MatchWhereInput, orderBy: [db_MatchOrderByWithAggregationInput], by: [db_MatchScalarFieldEnum]!, having: db_MatchScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_MatchGroupByOutputType]!
  db_findUniqueMatch(where: db_MatchWhereUniqueInput!): db_Match
  db_findUniqueMatchOrThrow(where: db_MatchWhereUniqueInput!): db_Match
  db_findFirstSchedule(where: db_ScheduleWhereInput, orderBy: [db_ScheduleOrderByWithRelationInput], cursor: db_ScheduleWhereUniqueInput, take: Int, skip: Int, distinct: [db_ScheduleScalarFieldEnum]): db_Schedule
  db_findFirstScheduleOrThrow(where: db_ScheduleWhereInput, orderBy: [db_ScheduleOrderByWithRelationInput], cursor: db_ScheduleWhereUniqueInput, take: Int, skip: Int, distinct: [db_ScheduleScalarFieldEnum]): db_Schedule
  db_findManySchedule(where: db_ScheduleWhereInput, orderBy: [db_ScheduleOrderByWithRelationInput], cursor: db_ScheduleWhereUniqueInput, take: Int, skip: Int, distinct: [db_ScheduleScalarFieldEnum]): [db_Schedule]!
  db_aggregateSchedule(where: db_ScheduleWhereInput, orderBy: [db_ScheduleOrderByWithRelationInput], cursor: db_ScheduleWhereUniqueInput, take: Int, skip: Int): db_AggregateSchedule!
  db_groupBySchedule(where: db_ScheduleWhereInput, orderBy: [db_ScheduleOrderByWithAggregationInput], by: [db_ScheduleScalarFieldEnum]!, having: db_ScheduleScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_ScheduleGroupByOutputType]!
  db_findUniqueSchedule(where: db_ScheduleWhereUniqueInput!): db_Schedule
  db_findUniqueScheduleOrThrow(where: db_ScheduleWhereUniqueInput!): db_Schedule
  db_findFirstReview(where: db_ReviewWhereInput, orderBy: [db_ReviewOrderByWithRelationInput], cursor: db_ReviewWhereUniqueInput, take: Int, skip: Int, distinct: [db_ReviewScalarFieldEnum]): db_Review
  db_findFirstReviewOrThrow(where: db_ReviewWhereInput, orderBy: [db_ReviewOrderByWithRelationInput], cursor: db_ReviewWhereUniqueInput, take: Int, skip: Int, distinct: [db_ReviewScalarFieldEnum]): db_Review
  db_findManyReview(where: db_ReviewWhereInput, orderBy: [db_ReviewOrderByWithRelationInput], cursor: db_ReviewWhereUniqueInput, take: Int, skip: Int, distinct: [db_ReviewScalarFieldEnum]): [db_Review]!
  db_aggregateReview(where: db_ReviewWhereInput, orderBy: [db_ReviewOrderByWithRelationInput], cursor: db_ReviewWhereUniqueInput, take: Int, skip: Int): db_AggregateReview!
  db_groupByReview(where: db_ReviewWhereInput, orderBy: [db_ReviewOrderByWithAggregationInput], by: [db_ReviewScalarFieldEnum]!, having: db_ReviewScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_ReviewGroupByOutputType]!
  db_findUniqueReview(where: db_ReviewWhereUniqueInput!): db_Review
  db_findUniqueReviewOrThrow(where: db_ReviewWhereUniqueInput!): db_Review
  db_findFirstMessage(where: db_MessageWhereInput, orderBy: [db_MessageOrderByWithRelationInput], cursor: db_MessageWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessageScalarFieldEnum]): db_Message
  db_findFirstMessageOrThrow(where: db_MessageWhereInput, orderBy: [db_MessageOrderByWithRelationInput], cursor: db_MessageWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessageScalarFieldEnum]): db_Message
  db_findManyMessage(where: db_MessageWhereInput, orderBy: [db_MessageOrderByWithRelationInput], cursor: db_MessageWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessageScalarFieldEnum]): [db_Message]!
  db_aggregateMessage(where: db_MessageWhereInput, orderBy: [db_MessageOrderByWithRelationInput], cursor: db_MessageWhereUniqueInput, take: Int, skip: Int): db_AggregateMessage!
  db_groupByMessage(where: db_MessageWhereInput, orderBy: [db_MessageOrderByWithAggregationInput], by: [db_MessageScalarFieldEnum]!, having: db_MessageScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_MessageGroupByOutputType]!
  db_findUniqueMessage(where: db_MessageWhereUniqueInput!): db_Message
  db_findUniqueMessageOrThrow(where: db_MessageWhereUniqueInput!): db_Message
  db_findFirstNotification(where: db_NotificationWhereInput, orderBy: [db_NotificationOrderByWithRelationInput], cursor: db_NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [db_NotificationScalarFieldEnum]): db_Notification
  db_findFirstNotificationOrThrow(where: db_NotificationWhereInput, orderBy: [db_NotificationOrderByWithRelationInput], cursor: db_NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [db_NotificationScalarFieldEnum]): db_Notification
  db_findManyNotification(where: db_NotificationWhereInput, orderBy: [db_NotificationOrderByWithRelationInput], cursor: db_NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [db_NotificationScalarFieldEnum]): [db_Notification]!
  db_aggregateNotification(where: db_NotificationWhereInput, orderBy: [db_NotificationOrderByWithRelationInput], cursor: db_NotificationWhereUniqueInput, take: Int, skip: Int): db_AggregateNotification!
  db_groupByNotification(where: db_NotificationWhereInput, orderBy: [db_NotificationOrderByWithAggregationInput], by: [db_NotificationScalarFieldEnum]!, having: db_NotificationScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_NotificationGroupByOutputType]!
  db_findUniqueNotification(where: db_NotificationWhereUniqueInput!): db_Notification
  db_findUniqueNotificationOrThrow(where: db_NotificationWhereUniqueInput!): db_Notification
  db_findFirstInvitation(where: db_InvitationWhereInput, orderBy: [db_InvitationOrderByWithRelationInput], cursor: db_InvitationWhereUniqueInput, take: Int, skip: Int, distinct: [db_InvitationScalarFieldEnum]): db_Invitation
  db_findFirstInvitationOrThrow(where: db_InvitationWhereInput, orderBy: [db_InvitationOrderByWithRelationInput], cursor: db_InvitationWhereUniqueInput, take: Int, skip: Int, distinct: [db_InvitationScalarFieldEnum]): db_Invitation
  db_findManyInvitation(where: db_InvitationWhereInput, orderBy: [db_InvitationOrderByWithRelationInput], cursor: db_InvitationWhereUniqueInput, take: Int, skip: Int, distinct: [db_InvitationScalarFieldEnum]): [db_Invitation]!
  db_aggregateInvitation(where: db_InvitationWhereInput, orderBy: [db_InvitationOrderByWithRelationInput], cursor: db_InvitationWhereUniqueInput, take: Int, skip: Int): db_AggregateInvitation!
  db_groupByInvitation(where: db_InvitationWhereInput, orderBy: [db_InvitationOrderByWithAggregationInput], by: [db_InvitationScalarFieldEnum]!, having: db_InvitationScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_InvitationGroupByOutputType]!
  db_findUniqueInvitation(where: db_InvitationWhereUniqueInput!): db_Invitation
  db_findUniqueInvitationOrThrow(where: db_InvitationWhereUniqueInput!): db_Invitation
  db_findFirstTodo(where: db_TodoWhereInput, orderBy: [db_TodoOrderByWithRelationInput], cursor: db_TodoWhereUniqueInput, take: Int, skip: Int, distinct: [db_TodoScalarFieldEnum]): db_Todo
  db_findFirstTodoOrThrow(where: db_TodoWhereInput, orderBy: [db_TodoOrderByWithRelationInput], cursor: db_TodoWhereUniqueInput, take: Int, skip: Int, distinct: [db_TodoScalarFieldEnum]): db_Todo
  db_findManyTodo(where: db_TodoWhereInput, orderBy: [db_TodoOrderByWithRelationInput], cursor: db_TodoWhereUniqueInput, take: Int, skip: Int, distinct: [db_TodoScalarFieldEnum]): [db_Todo]!
  db_aggregateTodo(where: db_TodoWhereInput, orderBy: [db_TodoOrderByWithRelationInput], cursor: db_TodoWhereUniqueInput, take: Int, skip: Int): db_AggregateTodo!
  db_groupByTodo(where: db_TodoWhereInput, orderBy: [db_TodoOrderByWithAggregationInput], by: [db_TodoScalarFieldEnum]!, having: db_TodoScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_TodoGroupByOutputType]!
  db_findUniqueTodo(where: db_TodoWhereUniqueInput!): db_Todo
  db_findUniqueTodoOrThrow(where: db_TodoWhereUniqueInput!): db_Todo
  db_findFirstPost(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int, distinct: [db_PostScalarFieldEnum]): db_Post
  db_findFirstPostOrThrow(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int, distinct: [db_PostScalarFieldEnum]): db_Post
  db_findManyPost(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int, distinct: [db_PostScalarFieldEnum]): [db_Post]!
  db_aggregatePost(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int): db_AggregatePost!
  db_groupByPost(where: db_PostWhereInput, orderBy: [db_PostOrderByWithAggregationInput], by: [db_PostScalarFieldEnum]!, having: db_PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [db_PostGroupByOutputType]!
  db_findUniquePost(where: db_PostWhereUniqueInput!): db_Post
  db_findUniquePostOrThrow(where: db_PostWhereUniqueInput!): db_Post
  db_queryRaw(query: String!, parameters: [String]): [_Row!]!
  db_queryRawJSON(query: String!, parameters: [String]): JSON
  weather_getCityById(config: weather_ConfigInput, id: [String!]): [weather_City]
  weather_getCityByName(config: weather_ConfigInput, country: String, name: String!): weather_City
}

type countries_State {
  code: String
  country: countries_Country!
  name: String!
  _join: Query!
}

input countries_StringQueryOperatorInput {
  eq: String
  in: [String!]
  ne: String
  nin: [String!]
  regex: String
}

type countries_Subdivision {
  code: ID!
  emoji: String
  name: String!
  _join: Query!
}

input db_NestedStringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: db_NestedStringFilter
}

input db_StringFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: db_NestedStringFilter
}

input db_NestedStringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: db_NestedStringNullableFilter
}

input db_StringNullableFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: db_NestedStringNullableFilter
}

input db_NestedIntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: db_NestedIntNullableFilter
}

input db_IntNullableFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: db_NestedIntNullableFilter
}

input db_NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: db_NestedDateTimeNullableFilter
}

input db_DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: db_NestedDateTimeNullableFilter
}

enum db_UserRole {
  COSPLAYER
  PHOTOGRAPHER
}

input db_EnumUserRoleFilter {
  equals: db_UserRole
  in: [db_UserRole]
  notIn: [db_UserRole]
  not: db_UserRole
}

input db_JsonNullableFilter {
  equals: JSON
  path: String
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input db_NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: db_NestedDateTimeFilter
}

input db_DateTimeFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: db_NestedDateTimeFilter
}

input db_MatchRelationFilter {
  is: db_MatchWhereInput
  isNot: db_MatchWhereInput
}

input db_ScheduleWhereInput {
  AND: db_ScheduleWhereInput
  OR: [db_ScheduleWhereInput]
  NOT: db_ScheduleWhereInput
  id: db_StringFilter
  matchId: db_StringFilter
  date: db_DateTimeFilter
  location: db_StringFilter
  createdAt: db_DateTimeFilter
  userId: db_StringNullableFilter
  match: db_MatchRelationFilter
  User: db_UserRelationFilter
}

input db_ScheduleListRelationFilter {
  every: db_ScheduleWhereInput
  some: db_ScheduleWhereInput
  none: db_ScheduleWhereInput
}

input db_MatchWhereInput {
  AND: db_MatchWhereInput
  OR: [db_MatchWhereInput]
  NOT: db_MatchWhereInput
  id: db_StringFilter
  cosplayerId: db_StringFilter
  photographerId: db_StringFilter
  createdAt: db_DateTimeFilter
  userId: db_StringNullableFilter
  cosplayer: db_UserRelationFilter
  photographer: db_UserRelationFilter
  User: db_UserRelationFilter
  Schedule: db_ScheduleListRelationFilter
}

input db_MatchListRelationFilter {
  every: db_MatchWhereInput
  some: db_MatchWhereInput
  none: db_MatchWhereInput
}

input db_NestedIntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: db_NestedIntFilter
}

input db_IntFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: db_NestedIntFilter
}

input db_ReviewWhereInput {
  AND: db_ReviewWhereInput
  OR: [db_ReviewWhereInput]
  NOT: db_ReviewWhereInput
  id: db_StringFilter
  reviewerId: db_StringFilter
  revieweeId: db_StringFilter
  rating: db_IntFilter
  comment: db_StringNullableFilter
  createdAt: db_DateTimeFilter
  userId: db_StringNullableFilter
  reviewer: db_UserRelationFilter
  reviewee: db_UserRelationFilter
  User: db_UserRelationFilter
}

input db_ReviewListRelationFilter {
  every: db_ReviewWhereInput
  some: db_ReviewWhereInput
  none: db_ReviewWhereInput
}

input db_MessageWhereInput {
  AND: db_MessageWhereInput
  OR: [db_MessageWhereInput]
  NOT: db_MessageWhereInput
  id: db_StringFilter
  senderId: db_StringFilter
  receiverId: db_StringFilter
  content: db_StringFilter
  createdAt: db_DateTimeFilter
  userId: db_StringNullableFilter
  sender: db_UserRelationFilter
  receiver: db_UserRelationFilter
  User: db_UserRelationFilter
}

input db_MessageListRelationFilter {
  every: db_MessageWhereInput
  some: db_MessageWhereInput
  none: db_MessageWhereInput
}

input db_NotificationWhereInput {
  AND: db_NotificationWhereInput
  OR: [db_NotificationWhereInput]
  NOT: db_NotificationWhereInput
  id: db_StringFilter
  userId: db_StringFilter
  content: db_StringFilter
  type: db_StringFilter
  createdAt: db_DateTimeFilter
  user: db_UserRelationFilter
}

input db_NotificationListRelationFilter {
  every: db_NotificationWhereInput
  some: db_NotificationWhereInput
  none: db_NotificationWhereInput
}

enum db_InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

input db_EnumInviteStatusFilter {
  equals: db_InviteStatus
  in: [db_InviteStatus]
  notIn: [db_InviteStatus]
  not: db_InviteStatus
}

input db_InvitationWhereInput {
  AND: db_InvitationWhereInput
  OR: [db_InvitationWhereInput]
  NOT: db_InvitationWhereInput
  id: db_StringFilter
  email: db_StringFilter
  status: db_EnumInviteStatusFilter
  createdAt: db_DateTimeFilter
  invitedBy: db_StringFilter
  invitedPhotographer: db_UserRelationFilter
}

input db_InvitationListRelationFilter {
  every: db_InvitationWhereInput
  some: db_InvitationWhereInput
  none: db_InvitationWhereInput
}

input db_AccountListRelationFilter {
  every: db_AccountWhereInput
  some: db_AccountWhereInput
  none: db_AccountWhereInput
}

input db_SessionWhereInput {
  AND: db_SessionWhereInput
  OR: [db_SessionWhereInput]
  NOT: db_SessionWhereInput
  id: db_StringFilter
  sessionToken: db_StringFilter
  userId: db_StringFilter
  expires: db_DateTimeFilter
  user: db_UserRelationFilter
}

input db_SessionListRelationFilter {
  every: db_SessionWhereInput
  some: db_SessionWhereInput
  none: db_SessionWhereInput
}

input db_NestedBoolFilter {
  equals: Boolean
  not: db_NestedBoolFilter
}

input db_BoolFilter {
  equals: Boolean
  not: db_NestedBoolFilter
}

input db_TodoWhereInput {
  AND: db_TodoWhereInput
  OR: [db_TodoWhereInput]
  NOT: db_TodoWhereInput
  id: db_StringFilter
  text: db_StringFilter
  isCompleted: db_BoolFilter
  createdAt: db_DateTimeFilter
  updatedAt: db_DateTimeFilter
  userId: db_StringFilter
  user: db_UserRelationFilter
}

input db_TodoListRelationFilter {
  every: db_TodoWhereInput
  some: db_TodoWhereInput
  none: db_TodoWhereInput
}

input db_PostWhereInput {
  AND: db_PostWhereInput
  OR: [db_PostWhereInput]
  NOT: db_PostWhereInput
  id: db_StringFilter
  title: db_StringFilter
  content: db_JsonNullableFilter
  published: db_BoolFilter
  createdAt: db_DateTimeFilter
  updatedAt: db_DateTimeFilter
  authorId: db_StringFilter
  author: db_UserRelationFilter
}

input db_PostListRelationFilter {
  every: db_PostWhereInput
  some: db_PostWhereInput
  none: db_PostWhereInput
}

input db_UserWhereInput {
  AND: db_UserWhereInput
  OR: [db_UserWhereInput]
  NOT: db_UserWhereInput
  id: db_StringFilter
  name: db_StringNullableFilter
  email: db_StringFilter
  emailVerified: db_DateTimeNullableFilter
  image: db_StringNullableFilter
  role: db_EnumUserRoleFilter
  interests: db_StringNullableFilter
  specialization: db_StringNullableFilter
  portfolio: db_JsonNullableFilter
  availability: db_JsonNullableFilter
  createdAt: db_DateTimeFilter
  updatedAt: db_DateTimeFilter
  stripeCustomerId: db_StringNullableFilter
  stripeSubscriptionId: db_StringNullableFilter
  stripePriceId: db_StringNullableFilter
  stripeCurrentPeriodEnd: db_DateTimeNullableFilter
  cosplayerMatches: db_MatchListRelationFilter
  photographerMatches: db_MatchListRelationFilter
  schedules: db_ScheduleListRelationFilter
  givenReviews: db_ReviewListRelationFilter
  receivedReviews: db_ReviewListRelationFilter
  sentMessages: db_MessageListRelationFilter
  receivedMessages: db_MessageListRelationFilter
  notifications: db_NotificationListRelationFilter
  invitations: db_InvitationListRelationFilter
  Match: db_MatchListRelationFilter
  Review: db_ReviewListRelationFilter
  Message: db_MessageListRelationFilter
  Account: db_AccountListRelationFilter
  Session: db_SessionListRelationFilter
  Todo: db_TodoListRelationFilter
  Post: db_PostListRelationFilter
}

input db_UserRelationFilter {
  is: db_UserWhereInput
  isNot: db_UserWhereInput
}

input db_AccountWhereInput {
  AND: db_AccountWhereInput
  OR: [db_AccountWhereInput]
  NOT: db_AccountWhereInput
  id: db_StringFilter
  userId: db_StringFilter
  type: db_StringFilter
  provider: db_StringFilter
  providerAccountId: db_StringFilter
  refresh_token: db_StringNullableFilter
  access_token: db_StringNullableFilter
  expires_at: db_IntNullableFilter
  token_type: db_StringNullableFilter
  scope: db_StringNullableFilter
  id_token: db_StringNullableFilter
  session_state: db_StringNullableFilter
  user: db_UserRelationFilter
}

enum db_SortOrder {
  asc
  desc
}

input db_MatchOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_ScheduleOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_ReviewOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_MessageOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_NotificationOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_InvitationOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_AccountOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_SessionOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_TodoOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_PostOrderByRelationAggregateInput {
  _count: db_SortOrder
}

input db_UserOrderByWithRelationInput {
  id: db_SortOrder
  name: db_SortOrder
  email: db_SortOrder
  emailVerified: db_SortOrder
  image: db_SortOrder
  role: db_SortOrder
  interests: db_SortOrder
  specialization: db_SortOrder
  portfolio: db_SortOrder
  availability: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  stripeCustomerId: db_SortOrder
  stripeSubscriptionId: db_SortOrder
  stripePriceId: db_SortOrder
  stripeCurrentPeriodEnd: db_SortOrder
  cosplayerMatches: db_MatchOrderByRelationAggregateInput
  photographerMatches: db_MatchOrderByRelationAggregateInput
  schedules: db_ScheduleOrderByRelationAggregateInput
  givenReviews: db_ReviewOrderByRelationAggregateInput
  receivedReviews: db_ReviewOrderByRelationAggregateInput
  sentMessages: db_MessageOrderByRelationAggregateInput
  receivedMessages: db_MessageOrderByRelationAggregateInput
  notifications: db_NotificationOrderByRelationAggregateInput
  invitations: db_InvitationOrderByRelationAggregateInput
  Match: db_MatchOrderByRelationAggregateInput
  Review: db_ReviewOrderByRelationAggregateInput
  Message: db_MessageOrderByRelationAggregateInput
  Account: db_AccountOrderByRelationAggregateInput
  Session: db_SessionOrderByRelationAggregateInput
  Todo: db_TodoOrderByRelationAggregateInput
  Post: db_PostOrderByRelationAggregateInput
}

input db_AccountOrderByWithRelationInput {
  id: db_SortOrder
  userId: db_SortOrder
  type: db_SortOrder
  provider: db_SortOrder
  providerAccountId: db_SortOrder
  refresh_token: db_SortOrder
  access_token: db_SortOrder
  expires_at: db_SortOrder
  token_type: db_SortOrder
  scope: db_SortOrder
  id_token: db_SortOrder
  session_state: db_SortOrder
  user: db_UserOrderByWithRelationInput
}

input db_AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

input db_AccountWhereUniqueInput {
  id: String
  provider_providerAccountId: db_AccountProviderProviderAccountIdCompoundUniqueInput
}

enum db_AccountScalarFieldEnum {
  id
  userId
  type
  provider
  providerAccountId
  refresh_token
  access_token
  expires_at
  token_type
  scope
  id_token
  session_state
}

input db_MatchOrderByWithRelationInput {
  id: db_SortOrder
  cosplayerId: db_SortOrder
  photographerId: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
  cosplayer: db_UserOrderByWithRelationInput
  photographer: db_UserOrderByWithRelationInput
  User: db_UserOrderByWithRelationInput
  Schedule: db_ScheduleOrderByRelationAggregateInput
}

input db_MatchWhereUniqueInput {
  id: String
}

enum db_MatchScalarFieldEnum {
  id
  cosplayerId
  photographerId
  createdAt
  userId
}

input db_ScheduleOrderByWithRelationInput {
  id: db_SortOrder
  matchId: db_SortOrder
  date: db_SortOrder
  location: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
  match: db_MatchOrderByWithRelationInput
  User: db_UserOrderByWithRelationInput
}

input db_ScheduleWhereUniqueInput {
  id: String
}

enum db_ScheduleScalarFieldEnum {
  id
  matchId
  date
  location
  createdAt
  userId
}

type db_Schedule {
  id: String!
  matchId: String!
  date: DateTime!
  location: String!
  createdAt: DateTime!
  userId: String
  match: db_Match!
  User: db_User
  _join: Query!
}

type db_MatchCountOutputType {
  Schedule: Int!
  _join: Query!
}

type db_Match {
  id: String!
  cosplayerId: String!
  photographerId: String!
  createdAt: DateTime!
  userId: String
  cosplayer: db_User!
  photographer: db_User!
  User: db_User
  Schedule(where: db_ScheduleWhereInput, orderBy: [db_ScheduleOrderByWithRelationInput], cursor: db_ScheduleWhereUniqueInput, take: Int, skip: Int, distinct: [db_ScheduleScalarFieldEnum]): [db_Schedule]
  _count: db_MatchCountOutputType!
  _join: Query!
}

input db_ReviewOrderByWithRelationInput {
  id: db_SortOrder
  reviewerId: db_SortOrder
  revieweeId: db_SortOrder
  rating: db_SortOrder
  comment: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
  reviewer: db_UserOrderByWithRelationInput
  reviewee: db_UserOrderByWithRelationInput
  User: db_UserOrderByWithRelationInput
}

input db_ReviewWhereUniqueInput {
  id: String
}

enum db_ReviewScalarFieldEnum {
  id
  reviewerId
  revieweeId
  rating
  comment
  createdAt
  userId
}

type db_Review {
  id: String!
  reviewerId: String!
  revieweeId: String!
  rating: Int!
  comment: String
  createdAt: DateTime!
  userId: String
  reviewer: db_User!
  reviewee: db_User!
  User: db_User
  _join: Query!
}

input db_MessageOrderByWithRelationInput {
  id: db_SortOrder
  senderId: db_SortOrder
  receiverId: db_SortOrder
  content: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
  sender: db_UserOrderByWithRelationInput
  receiver: db_UserOrderByWithRelationInput
  User: db_UserOrderByWithRelationInput
}

input db_MessageWhereUniqueInput {
  id: String
}

enum db_MessageScalarFieldEnum {
  id
  senderId
  receiverId
  content
  createdAt
  userId
}

type db_Message {
  id: String!
  senderId: String!
  receiverId: String!
  content: String!
  createdAt: DateTime!
  userId: String
  sender: db_User!
  receiver: db_User!
  User: db_User
  _join: Query!
}

input db_NotificationOrderByWithRelationInput {
  id: db_SortOrder
  userId: db_SortOrder
  content: db_SortOrder
  type: db_SortOrder
  createdAt: db_SortOrder
  user: db_UserOrderByWithRelationInput
}

input db_NotificationWhereUniqueInput {
  id: String
}

enum db_NotificationScalarFieldEnum {
  id
  userId
  content
  type
  createdAt
}

type db_Notification {
  id: String!
  userId: String!
  content: String!
  type: String!
  createdAt: DateTime!
  user: db_User!
  _join: Query!
}

input db_InvitationOrderByWithRelationInput {
  id: db_SortOrder
  email: db_SortOrder
  status: db_SortOrder
  createdAt: db_SortOrder
  invitedBy: db_SortOrder
  invitedPhotographer: db_UserOrderByWithRelationInput
}

input db_InvitationWhereUniqueInput {
  id: String
}

enum db_InvitationScalarFieldEnum {
  id
  email
  status
  createdAt
  invitedBy
}

type db_Invitation {
  id: String!
  email: String!
  status: db_InviteStatus!
  createdAt: DateTime!
  invitedBy: String!
  invitedPhotographer: db_User!
  _join: Query!
}

input db_SessionOrderByWithRelationInput {
  id: db_SortOrder
  sessionToken: db_SortOrder
  userId: db_SortOrder
  expires: db_SortOrder
  user: db_UserOrderByWithRelationInput
}

input db_SessionWhereUniqueInput {
  id: String
  sessionToken: String
}

enum db_SessionScalarFieldEnum {
  id
  sessionToken
  userId
  expires
}

type db_Session {
  id: String!
  sessionToken: String!
  userId: String!
  expires: DateTime!
  user: db_User!
  _join: Query!
}

input db_TodoOrderByWithRelationInput {
  id: db_SortOrder
  text: db_SortOrder
  isCompleted: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  userId: db_SortOrder
  user: db_UserOrderByWithRelationInput
}

input db_TodoWhereUniqueInput {
  id: String
}

enum db_TodoScalarFieldEnum {
  id
  text
  isCompleted
  createdAt
  updatedAt
  userId
}

type db_Todo {
  id: String!
  text: String!
  isCompleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  user: db_User!
  _join: Query!
}

input db_PostOrderByWithRelationInput {
  id: db_SortOrder
  title: db_SortOrder
  content: db_SortOrder
  published: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  authorId: db_SortOrder
  author: db_UserOrderByWithRelationInput
}

input db_PostWhereUniqueInput {
  id: String
}

enum db_PostScalarFieldEnum {
  id
  title
  content
  published
  createdAt
  updatedAt
  authorId
}

type db_Post {
  id: String!
  title: String!
  content: JSON
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  authorId: String!
  author: db_User!
  _join: Query!
}

type db_UserCountOutputType {
  cosplayerMatches: Int!
  photographerMatches: Int!
  schedules: Int!
  givenReviews: Int!
  receivedReviews: Int!
  sentMessages: Int!
  receivedMessages: Int!
  notifications: Int!
  invitations: Int!
  Match: Int!
  Review: Int!
  Message: Int!
  Account: Int!
  Session: Int!
  Todo: Int!
  Post: Int!
  _join: Query!
}

type db_User {
  id: String!
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole!
  interests: String
  specialization: String
  portfolio: JSON
  availability: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches(where: db_MatchWhereInput, orderBy: [db_MatchOrderByWithRelationInput], cursor: db_MatchWhereUniqueInput, take: Int, skip: Int, distinct: [db_MatchScalarFieldEnum]): [db_Match]
  photographerMatches(where: db_MatchWhereInput, orderBy: [db_MatchOrderByWithRelationInput], cursor: db_MatchWhereUniqueInput, take: Int, skip: Int, distinct: [db_MatchScalarFieldEnum]): [db_Match]
  schedules(where: db_ScheduleWhereInput, orderBy: [db_ScheduleOrderByWithRelationInput], cursor: db_ScheduleWhereUniqueInput, take: Int, skip: Int, distinct: [db_ScheduleScalarFieldEnum]): [db_Schedule]
  givenReviews(where: db_ReviewWhereInput, orderBy: [db_ReviewOrderByWithRelationInput], cursor: db_ReviewWhereUniqueInput, take: Int, skip: Int, distinct: [db_ReviewScalarFieldEnum]): [db_Review]
  receivedReviews(where: db_ReviewWhereInput, orderBy: [db_ReviewOrderByWithRelationInput], cursor: db_ReviewWhereUniqueInput, take: Int, skip: Int, distinct: [db_ReviewScalarFieldEnum]): [db_Review]
  sentMessages(where: db_MessageWhereInput, orderBy: [db_MessageOrderByWithRelationInput], cursor: db_MessageWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessageScalarFieldEnum]): [db_Message]
  receivedMessages(where: db_MessageWhereInput, orderBy: [db_MessageOrderByWithRelationInput], cursor: db_MessageWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessageScalarFieldEnum]): [db_Message]
  notifications(where: db_NotificationWhereInput, orderBy: [db_NotificationOrderByWithRelationInput], cursor: db_NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [db_NotificationScalarFieldEnum]): [db_Notification]
  invitations(where: db_InvitationWhereInput, orderBy: [db_InvitationOrderByWithRelationInput], cursor: db_InvitationWhereUniqueInput, take: Int, skip: Int, distinct: [db_InvitationScalarFieldEnum]): [db_Invitation]
  Match(where: db_MatchWhereInput, orderBy: [db_MatchOrderByWithRelationInput], cursor: db_MatchWhereUniqueInput, take: Int, skip: Int, distinct: [db_MatchScalarFieldEnum]): [db_Match]
  Review(where: db_ReviewWhereInput, orderBy: [db_ReviewOrderByWithRelationInput], cursor: db_ReviewWhereUniqueInput, take: Int, skip: Int, distinct: [db_ReviewScalarFieldEnum]): [db_Review]
  Message(where: db_MessageWhereInput, orderBy: [db_MessageOrderByWithRelationInput], cursor: db_MessageWhereUniqueInput, take: Int, skip: Int, distinct: [db_MessageScalarFieldEnum]): [db_Message]
  Account(where: db_AccountWhereInput, orderBy: [db_AccountOrderByWithRelationInput], cursor: db_AccountWhereUniqueInput, take: Int, skip: Int, distinct: [db_AccountScalarFieldEnum]): [db_Account]
  Session(where: db_SessionWhereInput, orderBy: [db_SessionOrderByWithRelationInput], cursor: db_SessionWhereUniqueInput, take: Int, skip: Int, distinct: [db_SessionScalarFieldEnum]): [db_Session]
  Todo(where: db_TodoWhereInput, orderBy: [db_TodoOrderByWithRelationInput], cursor: db_TodoWhereUniqueInput, take: Int, skip: Int, distinct: [db_TodoScalarFieldEnum]): [db_Todo]
  Post(where: db_PostWhereInput, orderBy: [db_PostOrderByWithRelationInput], cursor: db_PostWhereUniqueInput, take: Int, skip: Int, distinct: [db_PostScalarFieldEnum]): [db_Post]
  _count: db_UserCountOutputType!
  _join: Query!
}

type db_Account {
  id: String!
  userId: String!
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
  user: db_User!
  _join: Query!
}

type db_AccountCountAggregateOutputType {
  id: Int!
  userId: Int!
  type: Int!
  provider: Int!
  providerAccountId: Int!
  refresh_token: Int!
  access_token: Int!
  expires_at: Int!
  token_type: Int!
  scope: Int!
  id_token: Int!
  session_state: Int!
  _all: Int!
  _join: Query!
}

type db_AccountAvgAggregateOutputType {
  expires_at: Float
  _join: Query!
}

type db_AccountSumAggregateOutputType {
  expires_at: Int
  _join: Query!
}

type db_AccountMinAggregateOutputType {
  id: String
  userId: String
  type: String
  provider: String
  providerAccountId: String
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
  _join: Query!
}

type db_AccountMaxAggregateOutputType {
  id: String
  userId: String
  type: String
  provider: String
  providerAccountId: String
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
  _join: Query!
}

type db_AggregateAccount {
  _count: db_AccountCountAggregateOutputType
  _avg: db_AccountAvgAggregateOutputType
  _sum: db_AccountSumAggregateOutputType
  _min: db_AccountMinAggregateOutputType
  _max: db_AccountMaxAggregateOutputType
  _join: Query!
}

input db_AccountCountOrderByAggregateInput {
  id: db_SortOrder
  userId: db_SortOrder
  type: db_SortOrder
  provider: db_SortOrder
  providerAccountId: db_SortOrder
  refresh_token: db_SortOrder
  access_token: db_SortOrder
  expires_at: db_SortOrder
  token_type: db_SortOrder
  scope: db_SortOrder
  id_token: db_SortOrder
  session_state: db_SortOrder
}

input db_AccountAvgOrderByAggregateInput {
  expires_at: db_SortOrder
}

input db_AccountMaxOrderByAggregateInput {
  id: db_SortOrder
  userId: db_SortOrder
  type: db_SortOrder
  provider: db_SortOrder
  providerAccountId: db_SortOrder
  refresh_token: db_SortOrder
  access_token: db_SortOrder
  expires_at: db_SortOrder
  token_type: db_SortOrder
  scope: db_SortOrder
  id_token: db_SortOrder
  session_state: db_SortOrder
}

input db_AccountMinOrderByAggregateInput {
  id: db_SortOrder
  userId: db_SortOrder
  type: db_SortOrder
  provider: db_SortOrder
  providerAccountId: db_SortOrder
  refresh_token: db_SortOrder
  access_token: db_SortOrder
  expires_at: db_SortOrder
  token_type: db_SortOrder
  scope: db_SortOrder
  id_token: db_SortOrder
  session_state: db_SortOrder
}

input db_AccountSumOrderByAggregateInput {
  expires_at: db_SortOrder
}

input db_AccountOrderByWithAggregationInput {
  id: db_SortOrder
  userId: db_SortOrder
  type: db_SortOrder
  provider: db_SortOrder
  providerAccountId: db_SortOrder
  refresh_token: db_SortOrder
  access_token: db_SortOrder
  expires_at: db_SortOrder
  token_type: db_SortOrder
  scope: db_SortOrder
  id_token: db_SortOrder
  session_state: db_SortOrder
  _count: db_AccountCountOrderByAggregateInput
  _avg: db_AccountAvgOrderByAggregateInput
  _max: db_AccountMaxOrderByAggregateInput
  _min: db_AccountMinOrderByAggregateInput
  _sum: db_AccountSumOrderByAggregateInput
}

input db_NestedStringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: db_NestedStringWithAggregatesFilter
  _count: db_NestedIntFilter
  _min: db_NestedStringFilter
  _max: db_NestedStringFilter
}

input db_StringWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: db_NestedStringWithAggregatesFilter
  _count: db_NestedIntFilter
  _min: db_NestedStringFilter
  _max: db_NestedStringFilter
}

input db_NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: db_NestedStringNullableWithAggregatesFilter
  _count: db_NestedIntNullableFilter
  _min: db_NestedStringNullableFilter
  _max: db_NestedStringNullableFilter
}

input db_StringNullableWithAggregatesFilter {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: db_NestedStringNullableWithAggregatesFilter
  _count: db_NestedIntNullableFilter
  _min: db_NestedStringNullableFilter
  _max: db_NestedStringNullableFilter
}

input db_NestedFloatNullableFilter {
  equals: Float
  in: [Float]
  notIn: [Float]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: db_NestedFloatNullableFilter
}

input db_NestedIntNullableWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: db_NestedIntNullableWithAggregatesFilter
  _count: db_NestedIntNullableFilter
  _avg: db_NestedFloatNullableFilter
  _sum: db_NestedIntNullableFilter
  _min: db_NestedIntNullableFilter
  _max: db_NestedIntNullableFilter
}

input db_IntNullableWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: db_NestedIntNullableWithAggregatesFilter
  _count: db_NestedIntNullableFilter
  _avg: db_NestedFloatNullableFilter
  _sum: db_NestedIntNullableFilter
  _min: db_NestedIntNullableFilter
  _max: db_NestedIntNullableFilter
}

input db_AccountScalarWhereWithAggregatesInput {
  AND: db_AccountScalarWhereWithAggregatesInput
  OR: [db_AccountScalarWhereWithAggregatesInput]
  NOT: db_AccountScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  userId: db_StringWithAggregatesFilter
  type: db_StringWithAggregatesFilter
  provider: db_StringWithAggregatesFilter
  providerAccountId: db_StringWithAggregatesFilter
  refresh_token: db_StringNullableWithAggregatesFilter
  access_token: db_StringNullableWithAggregatesFilter
  expires_at: db_IntNullableWithAggregatesFilter
  token_type: db_StringNullableWithAggregatesFilter
  scope: db_StringNullableWithAggregatesFilter
  id_token: db_StringNullableWithAggregatesFilter
  session_state: db_StringNullableWithAggregatesFilter
}

type db_AccountGroupByOutputType {
  id: String!
  userId: String!
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
  _count: db_AccountCountAggregateOutputType
  _avg: db_AccountAvgAggregateOutputType
  _sum: db_AccountSumAggregateOutputType
  _min: db_AccountMinAggregateOutputType
  _max: db_AccountMaxAggregateOutputType
  _join: Query!
}

type db_SessionCountAggregateOutputType {
  id: Int!
  sessionToken: Int!
  userId: Int!
  expires: Int!
  _all: Int!
  _join: Query!
}

type db_SessionMinAggregateOutputType {
  id: String
  sessionToken: String
  userId: String
  expires: DateTime
  _join: Query!
}

type db_SessionMaxAggregateOutputType {
  id: String
  sessionToken: String
  userId: String
  expires: DateTime
  _join: Query!
}

type db_AggregateSession {
  _count: db_SessionCountAggregateOutputType
  _min: db_SessionMinAggregateOutputType
  _max: db_SessionMaxAggregateOutputType
  _join: Query!
}

input db_SessionCountOrderByAggregateInput {
  id: db_SortOrder
  sessionToken: db_SortOrder
  userId: db_SortOrder
  expires: db_SortOrder
}

input db_SessionMaxOrderByAggregateInput {
  id: db_SortOrder
  sessionToken: db_SortOrder
  userId: db_SortOrder
  expires: db_SortOrder
}

input db_SessionMinOrderByAggregateInput {
  id: db_SortOrder
  sessionToken: db_SortOrder
  userId: db_SortOrder
  expires: db_SortOrder
}

input db_SessionOrderByWithAggregationInput {
  id: db_SortOrder
  sessionToken: db_SortOrder
  userId: db_SortOrder
  expires: db_SortOrder
  _count: db_SessionCountOrderByAggregateInput
  _max: db_SessionMaxOrderByAggregateInput
  _min: db_SessionMinOrderByAggregateInput
}

input db_NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: db_NestedDateTimeWithAggregatesFilter
  _count: db_NestedIntFilter
  _min: db_NestedDateTimeFilter
  _max: db_NestedDateTimeFilter
}

input db_DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: db_NestedDateTimeWithAggregatesFilter
  _count: db_NestedIntFilter
  _min: db_NestedDateTimeFilter
  _max: db_NestedDateTimeFilter
}

input db_SessionScalarWhereWithAggregatesInput {
  AND: db_SessionScalarWhereWithAggregatesInput
  OR: [db_SessionScalarWhereWithAggregatesInput]
  NOT: db_SessionScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  sessionToken: db_StringWithAggregatesFilter
  userId: db_StringWithAggregatesFilter
  expires: db_DateTimeWithAggregatesFilter
}

type db_SessionGroupByOutputType {
  id: String!
  sessionToken: String!
  userId: String!
  expires: DateTime!
  _count: db_SessionCountAggregateOutputType
  _min: db_SessionMinAggregateOutputType
  _max: db_SessionMaxAggregateOutputType
  _join: Query!
}

input db_VerificationTokenWhereInput {
  AND: db_VerificationTokenWhereInput
  OR: [db_VerificationTokenWhereInput]
  NOT: db_VerificationTokenWhereInput
  identifier: db_StringFilter
  token: db_StringFilter
  expires: db_DateTimeFilter
}

input db_VerificationTokenOrderByWithRelationInput {
  identifier: db_SortOrder
  token: db_SortOrder
  expires: db_SortOrder
}

input db_VerificationTokenIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

input db_VerificationTokenWhereUniqueInput {
  token: String
  identifier_token: db_VerificationTokenIdentifierTokenCompoundUniqueInput
}

enum db_VerificationTokenScalarFieldEnum {
  identifier
  token
  expires
}

type db_VerificationToken {
  identifier: String!
  token: String!
  expires: DateTime!
  _join: Query!
}

type db_VerificationTokenCountAggregateOutputType {
  identifier: Int!
  token: Int!
  expires: Int!
  _all: Int!
  _join: Query!
}

type db_VerificationTokenMinAggregateOutputType {
  identifier: String
  token: String
  expires: DateTime
  _join: Query!
}

type db_VerificationTokenMaxAggregateOutputType {
  identifier: String
  token: String
  expires: DateTime
  _join: Query!
}

type db_AggregateVerificationToken {
  _count: db_VerificationTokenCountAggregateOutputType
  _min: db_VerificationTokenMinAggregateOutputType
  _max: db_VerificationTokenMaxAggregateOutputType
  _join: Query!
}

input db_VerificationTokenCountOrderByAggregateInput {
  identifier: db_SortOrder
  token: db_SortOrder
  expires: db_SortOrder
}

input db_VerificationTokenMaxOrderByAggregateInput {
  identifier: db_SortOrder
  token: db_SortOrder
  expires: db_SortOrder
}

input db_VerificationTokenMinOrderByAggregateInput {
  identifier: db_SortOrder
  token: db_SortOrder
  expires: db_SortOrder
}

input db_VerificationTokenOrderByWithAggregationInput {
  identifier: db_SortOrder
  token: db_SortOrder
  expires: db_SortOrder
  _count: db_VerificationTokenCountOrderByAggregateInput
  _max: db_VerificationTokenMaxOrderByAggregateInput
  _min: db_VerificationTokenMinOrderByAggregateInput
}

input db_VerificationTokenScalarWhereWithAggregatesInput {
  AND: db_VerificationTokenScalarWhereWithAggregatesInput
  OR: [db_VerificationTokenScalarWhereWithAggregatesInput]
  NOT: db_VerificationTokenScalarWhereWithAggregatesInput
  identifier: db_StringWithAggregatesFilter
  token: db_StringWithAggregatesFilter
  expires: db_DateTimeWithAggregatesFilter
}

type db_VerificationTokenGroupByOutputType {
  identifier: String!
  token: String!
  expires: DateTime!
  _count: db_VerificationTokenCountAggregateOutputType
  _min: db_VerificationTokenMinAggregateOutputType
  _max: db_VerificationTokenMaxAggregateOutputType
  _join: Query!
}

input db_UserWhereUniqueInput {
  id: String
  email: String
  stripeCustomerId: String
  stripeSubscriptionId: String
}

enum db_UserScalarFieldEnum {
  id
  name
  email
  emailVerified
  image
  role
  interests
  specialization
  portfolio
  availability
  createdAt
  updatedAt
  stripeCustomerId
  stripeSubscriptionId
  stripePriceId
  stripeCurrentPeriodEnd
}

type db_UserCountAggregateOutputType {
  id: Int!
  name: Int!
  email: Int!
  emailVerified: Int!
  image: Int!
  role: Int!
  interests: Int!
  specialization: Int!
  portfolio: Int!
  availability: Int!
  createdAt: Int!
  updatedAt: Int!
  stripeCustomerId: Int!
  stripeSubscriptionId: Int!
  stripePriceId: Int!
  stripeCurrentPeriodEnd: Int!
  _all: Int!
  _join: Query!
}

type db_UserMinAggregateOutputType {
  id: String
  name: String
  email: String
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  _join: Query!
}

type db_UserMaxAggregateOutputType {
  id: String
  name: String
  email: String
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  _join: Query!
}

type db_AggregateUser {
  _count: db_UserCountAggregateOutputType
  _min: db_UserMinAggregateOutputType
  _max: db_UserMaxAggregateOutputType
  _join: Query!
}

input db_UserCountOrderByAggregateInput {
  id: db_SortOrder
  name: db_SortOrder
  email: db_SortOrder
  emailVerified: db_SortOrder
  image: db_SortOrder
  role: db_SortOrder
  interests: db_SortOrder
  specialization: db_SortOrder
  portfolio: db_SortOrder
  availability: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  stripeCustomerId: db_SortOrder
  stripeSubscriptionId: db_SortOrder
  stripePriceId: db_SortOrder
  stripeCurrentPeriodEnd: db_SortOrder
}

input db_UserMaxOrderByAggregateInput {
  id: db_SortOrder
  name: db_SortOrder
  email: db_SortOrder
  emailVerified: db_SortOrder
  image: db_SortOrder
  role: db_SortOrder
  interests: db_SortOrder
  specialization: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  stripeCustomerId: db_SortOrder
  stripeSubscriptionId: db_SortOrder
  stripePriceId: db_SortOrder
  stripeCurrentPeriodEnd: db_SortOrder
}

input db_UserMinOrderByAggregateInput {
  id: db_SortOrder
  name: db_SortOrder
  email: db_SortOrder
  emailVerified: db_SortOrder
  image: db_SortOrder
  role: db_SortOrder
  interests: db_SortOrder
  specialization: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  stripeCustomerId: db_SortOrder
  stripeSubscriptionId: db_SortOrder
  stripePriceId: db_SortOrder
  stripeCurrentPeriodEnd: db_SortOrder
}

input db_UserOrderByWithAggregationInput {
  id: db_SortOrder
  name: db_SortOrder
  email: db_SortOrder
  emailVerified: db_SortOrder
  image: db_SortOrder
  role: db_SortOrder
  interests: db_SortOrder
  specialization: db_SortOrder
  portfolio: db_SortOrder
  availability: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  stripeCustomerId: db_SortOrder
  stripeSubscriptionId: db_SortOrder
  stripePriceId: db_SortOrder
  stripeCurrentPeriodEnd: db_SortOrder
  _count: db_UserCountOrderByAggregateInput
  _max: db_UserMaxOrderByAggregateInput
  _min: db_UserMinOrderByAggregateInput
}

input db_NestedDateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: db_NestedDateTimeNullableWithAggregatesFilter
  _count: db_NestedIntNullableFilter
  _min: db_NestedDateTimeNullableFilter
  _max: db_NestedDateTimeNullableFilter
}

input db_DateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime]
  notIn: [DateTime]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: db_NestedDateTimeNullableWithAggregatesFilter
  _count: db_NestedIntNullableFilter
  _min: db_NestedDateTimeNullableFilter
  _max: db_NestedDateTimeNullableFilter
}

input db_NestedEnumUserRoleFilter {
  equals: db_UserRole
  in: [db_UserRole]
  notIn: [db_UserRole]
  not: db_UserRole
}

input db_EnumUserRoleWithAggregatesFilter {
  equals: db_UserRole
  in: [db_UserRole]
  notIn: [db_UserRole]
  not: db_UserRole
  _count: db_NestedIntFilter
  _min: db_NestedEnumUserRoleFilter
  _max: db_NestedEnumUserRoleFilter
}

input db_NestedJsonNullableFilter {
  equals: JSON
  path: String
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input db_JsonNullableWithAggregatesFilter {
  equals: JSON
  path: String
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
  _count: db_NestedIntNullableFilter
  _min: db_NestedJsonNullableFilter
  _max: db_NestedJsonNullableFilter
}

input db_UserScalarWhereWithAggregatesInput {
  AND: db_UserScalarWhereWithAggregatesInput
  OR: [db_UserScalarWhereWithAggregatesInput]
  NOT: db_UserScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  name: db_StringNullableWithAggregatesFilter
  email: db_StringWithAggregatesFilter
  emailVerified: db_DateTimeNullableWithAggregatesFilter
  image: db_StringNullableWithAggregatesFilter
  role: db_EnumUserRoleWithAggregatesFilter
  interests: db_StringNullableWithAggregatesFilter
  specialization: db_StringNullableWithAggregatesFilter
  portfolio: db_JsonNullableWithAggregatesFilter
  availability: db_JsonNullableWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
  updatedAt: db_DateTimeWithAggregatesFilter
  stripeCustomerId: db_StringNullableWithAggregatesFilter
  stripeSubscriptionId: db_StringNullableWithAggregatesFilter
  stripePriceId: db_StringNullableWithAggregatesFilter
  stripeCurrentPeriodEnd: db_DateTimeNullableWithAggregatesFilter
}

type db_UserGroupByOutputType {
  id: String!
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole!
  interests: String
  specialization: String
  portfolio: JSON
  availability: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  _count: db_UserCountAggregateOutputType
  _min: db_UserMinAggregateOutputType
  _max: db_UserMaxAggregateOutputType
  _join: Query!
}

type db_MatchCountAggregateOutputType {
  id: Int!
  cosplayerId: Int!
  photographerId: Int!
  createdAt: Int!
  userId: Int!
  _all: Int!
  _join: Query!
}

type db_MatchMinAggregateOutputType {
  id: String
  cosplayerId: String
  photographerId: String
  createdAt: DateTime
  userId: String
  _join: Query!
}

type db_MatchMaxAggregateOutputType {
  id: String
  cosplayerId: String
  photographerId: String
  createdAt: DateTime
  userId: String
  _join: Query!
}

type db_AggregateMatch {
  _count: db_MatchCountAggregateOutputType
  _min: db_MatchMinAggregateOutputType
  _max: db_MatchMaxAggregateOutputType
  _join: Query!
}

input db_MatchCountOrderByAggregateInput {
  id: db_SortOrder
  cosplayerId: db_SortOrder
  photographerId: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_MatchMaxOrderByAggregateInput {
  id: db_SortOrder
  cosplayerId: db_SortOrder
  photographerId: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_MatchMinOrderByAggregateInput {
  id: db_SortOrder
  cosplayerId: db_SortOrder
  photographerId: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_MatchOrderByWithAggregationInput {
  id: db_SortOrder
  cosplayerId: db_SortOrder
  photographerId: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
  _count: db_MatchCountOrderByAggregateInput
  _max: db_MatchMaxOrderByAggregateInput
  _min: db_MatchMinOrderByAggregateInput
}

input db_MatchScalarWhereWithAggregatesInput {
  AND: db_MatchScalarWhereWithAggregatesInput
  OR: [db_MatchScalarWhereWithAggregatesInput]
  NOT: db_MatchScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  cosplayerId: db_StringWithAggregatesFilter
  photographerId: db_StringWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
  userId: db_StringNullableWithAggregatesFilter
}

type db_MatchGroupByOutputType {
  id: String!
  cosplayerId: String!
  photographerId: String!
  createdAt: DateTime!
  userId: String
  _count: db_MatchCountAggregateOutputType
  _min: db_MatchMinAggregateOutputType
  _max: db_MatchMaxAggregateOutputType
  _join: Query!
}

type db_ScheduleCountAggregateOutputType {
  id: Int!
  matchId: Int!
  date: Int!
  location: Int!
  createdAt: Int!
  userId: Int!
  _all: Int!
  _join: Query!
}

type db_ScheduleMinAggregateOutputType {
  id: String
  matchId: String
  date: DateTime
  location: String
  createdAt: DateTime
  userId: String
  _join: Query!
}

type db_ScheduleMaxAggregateOutputType {
  id: String
  matchId: String
  date: DateTime
  location: String
  createdAt: DateTime
  userId: String
  _join: Query!
}

type db_AggregateSchedule {
  _count: db_ScheduleCountAggregateOutputType
  _min: db_ScheduleMinAggregateOutputType
  _max: db_ScheduleMaxAggregateOutputType
  _join: Query!
}

input db_ScheduleCountOrderByAggregateInput {
  id: db_SortOrder
  matchId: db_SortOrder
  date: db_SortOrder
  location: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_ScheduleMaxOrderByAggregateInput {
  id: db_SortOrder
  matchId: db_SortOrder
  date: db_SortOrder
  location: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_ScheduleMinOrderByAggregateInput {
  id: db_SortOrder
  matchId: db_SortOrder
  date: db_SortOrder
  location: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_ScheduleOrderByWithAggregationInput {
  id: db_SortOrder
  matchId: db_SortOrder
  date: db_SortOrder
  location: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
  _count: db_ScheduleCountOrderByAggregateInput
  _max: db_ScheduleMaxOrderByAggregateInput
  _min: db_ScheduleMinOrderByAggregateInput
}

input db_ScheduleScalarWhereWithAggregatesInput {
  AND: db_ScheduleScalarWhereWithAggregatesInput
  OR: [db_ScheduleScalarWhereWithAggregatesInput]
  NOT: db_ScheduleScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  matchId: db_StringWithAggregatesFilter
  date: db_DateTimeWithAggregatesFilter
  location: db_StringWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
  userId: db_StringNullableWithAggregatesFilter
}

type db_ScheduleGroupByOutputType {
  id: String!
  matchId: String!
  date: DateTime!
  location: String!
  createdAt: DateTime!
  userId: String
  _count: db_ScheduleCountAggregateOutputType
  _min: db_ScheduleMinAggregateOutputType
  _max: db_ScheduleMaxAggregateOutputType
  _join: Query!
}

type db_ReviewCountAggregateOutputType {
  id: Int!
  reviewerId: Int!
  revieweeId: Int!
  rating: Int!
  comment: Int!
  createdAt: Int!
  userId: Int!
  _all: Int!
  _join: Query!
}

type db_ReviewAvgAggregateOutputType {
  rating: Float
  _join: Query!
}

type db_ReviewSumAggregateOutputType {
  rating: Int
  _join: Query!
}

type db_ReviewMinAggregateOutputType {
  id: String
  reviewerId: String
  revieweeId: String
  rating: Int
  comment: String
  createdAt: DateTime
  userId: String
  _join: Query!
}

type db_ReviewMaxAggregateOutputType {
  id: String
  reviewerId: String
  revieweeId: String
  rating: Int
  comment: String
  createdAt: DateTime
  userId: String
  _join: Query!
}

type db_AggregateReview {
  _count: db_ReviewCountAggregateOutputType
  _avg: db_ReviewAvgAggregateOutputType
  _sum: db_ReviewSumAggregateOutputType
  _min: db_ReviewMinAggregateOutputType
  _max: db_ReviewMaxAggregateOutputType
  _join: Query!
}

input db_ReviewCountOrderByAggregateInput {
  id: db_SortOrder
  reviewerId: db_SortOrder
  revieweeId: db_SortOrder
  rating: db_SortOrder
  comment: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_ReviewAvgOrderByAggregateInput {
  rating: db_SortOrder
}

input db_ReviewMaxOrderByAggregateInput {
  id: db_SortOrder
  reviewerId: db_SortOrder
  revieweeId: db_SortOrder
  rating: db_SortOrder
  comment: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_ReviewMinOrderByAggregateInput {
  id: db_SortOrder
  reviewerId: db_SortOrder
  revieweeId: db_SortOrder
  rating: db_SortOrder
  comment: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_ReviewSumOrderByAggregateInput {
  rating: db_SortOrder
}

input db_ReviewOrderByWithAggregationInput {
  id: db_SortOrder
  reviewerId: db_SortOrder
  revieweeId: db_SortOrder
  rating: db_SortOrder
  comment: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
  _count: db_ReviewCountOrderByAggregateInput
  _avg: db_ReviewAvgOrderByAggregateInput
  _max: db_ReviewMaxOrderByAggregateInput
  _min: db_ReviewMinOrderByAggregateInput
  _sum: db_ReviewSumOrderByAggregateInput
}

input db_NestedFloatFilter {
  equals: Float
  in: [Float]
  notIn: [Float]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: db_NestedFloatFilter
}

input db_NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: db_NestedIntWithAggregatesFilter
  _count: db_NestedIntFilter
  _avg: db_NestedFloatFilter
  _sum: db_NestedIntFilter
  _min: db_NestedIntFilter
  _max: db_NestedIntFilter
}

input db_IntWithAggregatesFilter {
  equals: Int
  in: [Int]
  notIn: [Int]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: db_NestedIntWithAggregatesFilter
  _count: db_NestedIntFilter
  _avg: db_NestedFloatFilter
  _sum: db_NestedIntFilter
  _min: db_NestedIntFilter
  _max: db_NestedIntFilter
}

input db_ReviewScalarWhereWithAggregatesInput {
  AND: db_ReviewScalarWhereWithAggregatesInput
  OR: [db_ReviewScalarWhereWithAggregatesInput]
  NOT: db_ReviewScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  reviewerId: db_StringWithAggregatesFilter
  revieweeId: db_StringWithAggregatesFilter
  rating: db_IntWithAggregatesFilter
  comment: db_StringNullableWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
  userId: db_StringNullableWithAggregatesFilter
}

type db_ReviewGroupByOutputType {
  id: String!
  reviewerId: String!
  revieweeId: String!
  rating: Int!
  comment: String
  createdAt: DateTime!
  userId: String
  _count: db_ReviewCountAggregateOutputType
  _avg: db_ReviewAvgAggregateOutputType
  _sum: db_ReviewSumAggregateOutputType
  _min: db_ReviewMinAggregateOutputType
  _max: db_ReviewMaxAggregateOutputType
  _join: Query!
}

type db_MessageCountAggregateOutputType {
  id: Int!
  senderId: Int!
  receiverId: Int!
  content: Int!
  createdAt: Int!
  userId: Int!
  _all: Int!
  _join: Query!
}

type db_MessageMinAggregateOutputType {
  id: String
  senderId: String
  receiverId: String
  content: String
  createdAt: DateTime
  userId: String
  _join: Query!
}

type db_MessageMaxAggregateOutputType {
  id: String
  senderId: String
  receiverId: String
  content: String
  createdAt: DateTime
  userId: String
  _join: Query!
}

type db_AggregateMessage {
  _count: db_MessageCountAggregateOutputType
  _min: db_MessageMinAggregateOutputType
  _max: db_MessageMaxAggregateOutputType
  _join: Query!
}

input db_MessageCountOrderByAggregateInput {
  id: db_SortOrder
  senderId: db_SortOrder
  receiverId: db_SortOrder
  content: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_MessageMaxOrderByAggregateInput {
  id: db_SortOrder
  senderId: db_SortOrder
  receiverId: db_SortOrder
  content: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_MessageMinOrderByAggregateInput {
  id: db_SortOrder
  senderId: db_SortOrder
  receiverId: db_SortOrder
  content: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
}

input db_MessageOrderByWithAggregationInput {
  id: db_SortOrder
  senderId: db_SortOrder
  receiverId: db_SortOrder
  content: db_SortOrder
  createdAt: db_SortOrder
  userId: db_SortOrder
  _count: db_MessageCountOrderByAggregateInput
  _max: db_MessageMaxOrderByAggregateInput
  _min: db_MessageMinOrderByAggregateInput
}

input db_MessageScalarWhereWithAggregatesInput {
  AND: db_MessageScalarWhereWithAggregatesInput
  OR: [db_MessageScalarWhereWithAggregatesInput]
  NOT: db_MessageScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  senderId: db_StringWithAggregatesFilter
  receiverId: db_StringWithAggregatesFilter
  content: db_StringWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
  userId: db_StringNullableWithAggregatesFilter
}

type db_MessageGroupByOutputType {
  id: String!
  senderId: String!
  receiverId: String!
  content: String!
  createdAt: DateTime!
  userId: String
  _count: db_MessageCountAggregateOutputType
  _min: db_MessageMinAggregateOutputType
  _max: db_MessageMaxAggregateOutputType
  _join: Query!
}

type db_NotificationCountAggregateOutputType {
  id: Int!
  userId: Int!
  content: Int!
  type: Int!
  createdAt: Int!
  _all: Int!
  _join: Query!
}

type db_NotificationMinAggregateOutputType {
  id: String
  userId: String
  content: String
  type: String
  createdAt: DateTime
  _join: Query!
}

type db_NotificationMaxAggregateOutputType {
  id: String
  userId: String
  content: String
  type: String
  createdAt: DateTime
  _join: Query!
}

type db_AggregateNotification {
  _count: db_NotificationCountAggregateOutputType
  _min: db_NotificationMinAggregateOutputType
  _max: db_NotificationMaxAggregateOutputType
  _join: Query!
}

input db_NotificationCountOrderByAggregateInput {
  id: db_SortOrder
  userId: db_SortOrder
  content: db_SortOrder
  type: db_SortOrder
  createdAt: db_SortOrder
}

input db_NotificationMaxOrderByAggregateInput {
  id: db_SortOrder
  userId: db_SortOrder
  content: db_SortOrder
  type: db_SortOrder
  createdAt: db_SortOrder
}

input db_NotificationMinOrderByAggregateInput {
  id: db_SortOrder
  userId: db_SortOrder
  content: db_SortOrder
  type: db_SortOrder
  createdAt: db_SortOrder
}

input db_NotificationOrderByWithAggregationInput {
  id: db_SortOrder
  userId: db_SortOrder
  content: db_SortOrder
  type: db_SortOrder
  createdAt: db_SortOrder
  _count: db_NotificationCountOrderByAggregateInput
  _max: db_NotificationMaxOrderByAggregateInput
  _min: db_NotificationMinOrderByAggregateInput
}

input db_NotificationScalarWhereWithAggregatesInput {
  AND: db_NotificationScalarWhereWithAggregatesInput
  OR: [db_NotificationScalarWhereWithAggregatesInput]
  NOT: db_NotificationScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  userId: db_StringWithAggregatesFilter
  content: db_StringWithAggregatesFilter
  type: db_StringWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
}

type db_NotificationGroupByOutputType {
  id: String!
  userId: String!
  content: String!
  type: String!
  createdAt: DateTime!
  _count: db_NotificationCountAggregateOutputType
  _min: db_NotificationMinAggregateOutputType
  _max: db_NotificationMaxAggregateOutputType
  _join: Query!
}

type db_InvitationCountAggregateOutputType {
  id: Int!
  email: Int!
  status: Int!
  createdAt: Int!
  invitedBy: Int!
  _all: Int!
  _join: Query!
}

type db_InvitationMinAggregateOutputType {
  id: String
  email: String
  status: db_InviteStatus
  createdAt: DateTime
  invitedBy: String
  _join: Query!
}

type db_InvitationMaxAggregateOutputType {
  id: String
  email: String
  status: db_InviteStatus
  createdAt: DateTime
  invitedBy: String
  _join: Query!
}

type db_AggregateInvitation {
  _count: db_InvitationCountAggregateOutputType
  _min: db_InvitationMinAggregateOutputType
  _max: db_InvitationMaxAggregateOutputType
  _join: Query!
}

input db_InvitationCountOrderByAggregateInput {
  id: db_SortOrder
  email: db_SortOrder
  status: db_SortOrder
  createdAt: db_SortOrder
  invitedBy: db_SortOrder
}

input db_InvitationMaxOrderByAggregateInput {
  id: db_SortOrder
  email: db_SortOrder
  status: db_SortOrder
  createdAt: db_SortOrder
  invitedBy: db_SortOrder
}

input db_InvitationMinOrderByAggregateInput {
  id: db_SortOrder
  email: db_SortOrder
  status: db_SortOrder
  createdAt: db_SortOrder
  invitedBy: db_SortOrder
}

input db_InvitationOrderByWithAggregationInput {
  id: db_SortOrder
  email: db_SortOrder
  status: db_SortOrder
  createdAt: db_SortOrder
  invitedBy: db_SortOrder
  _count: db_InvitationCountOrderByAggregateInput
  _max: db_InvitationMaxOrderByAggregateInput
  _min: db_InvitationMinOrderByAggregateInput
}

input db_NestedEnumInviteStatusFilter {
  equals: db_InviteStatus
  in: [db_InviteStatus]
  notIn: [db_InviteStatus]
  not: db_InviteStatus
}

input db_EnumInviteStatusWithAggregatesFilter {
  equals: db_InviteStatus
  in: [db_InviteStatus]
  notIn: [db_InviteStatus]
  not: db_InviteStatus
  _count: db_NestedIntFilter
  _min: db_NestedEnumInviteStatusFilter
  _max: db_NestedEnumInviteStatusFilter
}

input db_InvitationScalarWhereWithAggregatesInput {
  AND: db_InvitationScalarWhereWithAggregatesInput
  OR: [db_InvitationScalarWhereWithAggregatesInput]
  NOT: db_InvitationScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  email: db_StringWithAggregatesFilter
  status: db_EnumInviteStatusWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
  invitedBy: db_StringWithAggregatesFilter
}

type db_InvitationGroupByOutputType {
  id: String!
  email: String!
  status: db_InviteStatus!
  createdAt: DateTime!
  invitedBy: String!
  _count: db_InvitationCountAggregateOutputType
  _min: db_InvitationMinAggregateOutputType
  _max: db_InvitationMaxAggregateOutputType
  _join: Query!
}

type db_TodoCountAggregateOutputType {
  id: Int!
  text: Int!
  isCompleted: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  _all: Int!
  _join: Query!
}

type db_TodoMinAggregateOutputType {
  id: String
  text: String
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  _join: Query!
}

type db_TodoMaxAggregateOutputType {
  id: String
  text: String
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  _join: Query!
}

type db_AggregateTodo {
  _count: db_TodoCountAggregateOutputType
  _min: db_TodoMinAggregateOutputType
  _max: db_TodoMaxAggregateOutputType
  _join: Query!
}

input db_TodoCountOrderByAggregateInput {
  id: db_SortOrder
  text: db_SortOrder
  isCompleted: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  userId: db_SortOrder
}

input db_TodoMaxOrderByAggregateInput {
  id: db_SortOrder
  text: db_SortOrder
  isCompleted: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  userId: db_SortOrder
}

input db_TodoMinOrderByAggregateInput {
  id: db_SortOrder
  text: db_SortOrder
  isCompleted: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  userId: db_SortOrder
}

input db_TodoOrderByWithAggregationInput {
  id: db_SortOrder
  text: db_SortOrder
  isCompleted: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  userId: db_SortOrder
  _count: db_TodoCountOrderByAggregateInput
  _max: db_TodoMaxOrderByAggregateInput
  _min: db_TodoMinOrderByAggregateInput
}

input db_NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: db_NestedBoolWithAggregatesFilter
  _count: db_NestedIntFilter
  _min: db_NestedBoolFilter
  _max: db_NestedBoolFilter
}

input db_BoolWithAggregatesFilter {
  equals: Boolean
  not: db_NestedBoolWithAggregatesFilter
  _count: db_NestedIntFilter
  _min: db_NestedBoolFilter
  _max: db_NestedBoolFilter
}

input db_TodoScalarWhereWithAggregatesInput {
  AND: db_TodoScalarWhereWithAggregatesInput
  OR: [db_TodoScalarWhereWithAggregatesInput]
  NOT: db_TodoScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  text: db_StringWithAggregatesFilter
  isCompleted: db_BoolWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
  updatedAt: db_DateTimeWithAggregatesFilter
  userId: db_StringWithAggregatesFilter
}

type db_TodoGroupByOutputType {
  id: String!
  text: String!
  isCompleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  _count: db_TodoCountAggregateOutputType
  _min: db_TodoMinAggregateOutputType
  _max: db_TodoMaxAggregateOutputType
  _join: Query!
}

type db_PostCountAggregateOutputType {
  id: Int!
  title: Int!
  content: Int!
  published: Int!
  createdAt: Int!
  updatedAt: Int!
  authorId: Int!
  _all: Int!
  _join: Query!
}

type db_PostMinAggregateOutputType {
  id: String
  title: String
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  authorId: String
  _join: Query!
}

type db_PostMaxAggregateOutputType {
  id: String
  title: String
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  authorId: String
  _join: Query!
}

type db_AggregatePost {
  _count: db_PostCountAggregateOutputType
  _min: db_PostMinAggregateOutputType
  _max: db_PostMaxAggregateOutputType
  _join: Query!
}

input db_PostCountOrderByAggregateInput {
  id: db_SortOrder
  title: db_SortOrder
  content: db_SortOrder
  published: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  authorId: db_SortOrder
}

input db_PostMaxOrderByAggregateInput {
  id: db_SortOrder
  title: db_SortOrder
  published: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  authorId: db_SortOrder
}

input db_PostMinOrderByAggregateInput {
  id: db_SortOrder
  title: db_SortOrder
  published: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  authorId: db_SortOrder
}

input db_PostOrderByWithAggregationInput {
  id: db_SortOrder
  title: db_SortOrder
  content: db_SortOrder
  published: db_SortOrder
  createdAt: db_SortOrder
  updatedAt: db_SortOrder
  authorId: db_SortOrder
  _count: db_PostCountOrderByAggregateInput
  _max: db_PostMaxOrderByAggregateInput
  _min: db_PostMinOrderByAggregateInput
}

input db_PostScalarWhereWithAggregatesInput {
  AND: db_PostScalarWhereWithAggregatesInput
  OR: [db_PostScalarWhereWithAggregatesInput]
  NOT: db_PostScalarWhereWithAggregatesInput
  id: db_StringWithAggregatesFilter
  title: db_StringWithAggregatesFilter
  content: db_JsonNullableWithAggregatesFilter
  published: db_BoolWithAggregatesFilter
  createdAt: db_DateTimeWithAggregatesFilter
  updatedAt: db_DateTimeWithAggregatesFilter
  authorId: db_StringWithAggregatesFilter
}

type db_PostGroupByOutputType {
  id: String!
  title: String!
  content: JSON
  published: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  authorId: String!
  _count: db_PostCountAggregateOutputType
  _min: db_PostMinAggregateOutputType
  _max: db_PostMaxAggregateOutputType
  _join: Query!
}

enum db_NullableJsonNullValueInput {
  DbNull
  JsonNull
}

input db_NotificationCreateWithoutUserInput {
  id: String
  content: String!
  type: String!
  createdAt: DateTime
}

input db_NotificationCreateOrConnectWithoutUserInput {
  where: db_NotificationWhereUniqueInput!
  create: db_NotificationCreateWithoutUserInput!
}

input db_NotificationCreateManyUserInput {
  id: String
  content: String!
  type: String!
  createdAt: DateTime
}

input db_NotificationCreateManyUserInputEnvelope {
  data: db_NotificationCreateManyUserInput!
  skipDuplicates: Boolean
}

input db_NotificationCreateNestedManyWithoutUserInput {
  create: db_NotificationCreateWithoutUserInput
  connectOrCreate: db_NotificationCreateOrConnectWithoutUserInput
  createMany: db_NotificationCreateManyUserInputEnvelope
  connect: db_NotificationWhereUniqueInput
}

input db_InvitationCreateWithoutInvitedPhotographerInput {
  id: String
  email: String!
  status: db_InviteStatus
  createdAt: DateTime
}

input db_InvitationCreateOrConnectWithoutInvitedPhotographerInput {
  where: db_InvitationWhereUniqueInput!
  create: db_InvitationCreateWithoutInvitedPhotographerInput!
}

input db_InvitationCreateManyInvitedPhotographerInput {
  id: String
  email: String!
  status: db_InviteStatus
  createdAt: DateTime
}

input db_InvitationCreateManyInvitedPhotographerInputEnvelope {
  data: db_InvitationCreateManyInvitedPhotographerInput!
  skipDuplicates: Boolean
}

input db_InvitationCreateNestedManyWithoutInvitedPhotographerInput {
  create: db_InvitationCreateWithoutInvitedPhotographerInput
  connectOrCreate: db_InvitationCreateOrConnectWithoutInvitedPhotographerInput
  createMany: db_InvitationCreateManyInvitedPhotographerInputEnvelope
  connect: db_InvitationWhereUniqueInput
}

input db_ReviewCreateWithoutUserInput {
  id: String
  rating: Int!
  comment: String
  createdAt: DateTime
  reviewer: db_UserCreateNestedOneWithoutGivenReviewsInput!
  reviewee: db_UserCreateNestedOneWithoutReceivedReviewsInput!
}

input db_ReviewCreateOrConnectWithoutUserInput {
  where: db_ReviewWhereUniqueInput!
  create: db_ReviewCreateWithoutUserInput!
}

input db_ReviewCreateManyUserInput {
  id: String
  reviewerId: String!
  revieweeId: String!
  rating: Int!
  comment: String
  createdAt: DateTime
}

input db_ReviewCreateManyUserInputEnvelope {
  data: db_ReviewCreateManyUserInput!
  skipDuplicates: Boolean
}

input db_ReviewCreateNestedManyWithoutUserInput {
  create: db_ReviewCreateWithoutUserInput
  connectOrCreate: db_ReviewCreateOrConnectWithoutUserInput
  createMany: db_ReviewCreateManyUserInputEnvelope
  connect: db_ReviewWhereUniqueInput
}

input db_MessageCreateWithoutUserInput {
  id: String
  content: String!
  createdAt: DateTime
  sender: db_UserCreateNestedOneWithoutSentMessagesInput!
  receiver: db_UserCreateNestedOneWithoutReceivedMessagesInput!
}

input db_MessageCreateOrConnectWithoutUserInput {
  where: db_MessageWhereUniqueInput!
  create: db_MessageCreateWithoutUserInput!
}

input db_MessageCreateManyUserInput {
  id: String
  senderId: String!
  receiverId: String!
  content: String!
  createdAt: DateTime
}

input db_MessageCreateManyUserInputEnvelope {
  data: db_MessageCreateManyUserInput!
  skipDuplicates: Boolean
}

input db_MessageCreateNestedManyWithoutUserInput {
  create: db_MessageCreateWithoutUserInput
  connectOrCreate: db_MessageCreateOrConnectWithoutUserInput
  createMany: db_MessageCreateManyUserInputEnvelope
  connect: db_MessageWhereUniqueInput
}

input db_AccountCreateWithoutUserInput {
  id: String
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
}

input db_AccountCreateOrConnectWithoutUserInput {
  where: db_AccountWhereUniqueInput!
  create: db_AccountCreateWithoutUserInput!
}

input db_AccountCreateManyUserInput {
  id: String
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
}

input db_AccountCreateManyUserInputEnvelope {
  data: db_AccountCreateManyUserInput!
  skipDuplicates: Boolean
}

input db_AccountCreateNestedManyWithoutUserInput {
  create: db_AccountCreateWithoutUserInput
  connectOrCreate: db_AccountCreateOrConnectWithoutUserInput
  createMany: db_AccountCreateManyUserInputEnvelope
  connect: db_AccountWhereUniqueInput
}

input db_SessionCreateWithoutUserInput {
  id: String
  sessionToken: String!
  expires: DateTime!
}

input db_SessionCreateOrConnectWithoutUserInput {
  where: db_SessionWhereUniqueInput!
  create: db_SessionCreateWithoutUserInput!
}

input db_SessionCreateManyUserInput {
  id: String
  sessionToken: String!
  expires: DateTime!
}

input db_SessionCreateManyUserInputEnvelope {
  data: db_SessionCreateManyUserInput!
  skipDuplicates: Boolean
}

input db_SessionCreateNestedManyWithoutUserInput {
  create: db_SessionCreateWithoutUserInput
  connectOrCreate: db_SessionCreateOrConnectWithoutUserInput
  createMany: db_SessionCreateManyUserInputEnvelope
  connect: db_SessionWhereUniqueInput
}

input db_TodoCreateWithoutUserInput {
  id: String
  text: String!
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input db_TodoCreateOrConnectWithoutUserInput {
  where: db_TodoWhereUniqueInput!
  create: db_TodoCreateWithoutUserInput!
}

input db_TodoCreateManyUserInput {
  id: String
  text: String!
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input db_TodoCreateManyUserInputEnvelope {
  data: db_TodoCreateManyUserInput!
  skipDuplicates: Boolean
}

input db_TodoCreateNestedManyWithoutUserInput {
  create: db_TodoCreateWithoutUserInput
  connectOrCreate: db_TodoCreateOrConnectWithoutUserInput
  createMany: db_TodoCreateManyUserInputEnvelope
  connect: db_TodoWhereUniqueInput
}

input db_PostCreateWithoutAuthorInput {
  id: String
  title: String!
  content: db_NullableJsonNullValueInput
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input db_PostCreateOrConnectWithoutAuthorInput {
  where: db_PostWhereUniqueInput!
  create: db_PostCreateWithoutAuthorInput!
}

input db_PostCreateManyAuthorInput {
  id: String
  title: String!
  content: db_NullableJsonNullValueInput
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input db_PostCreateManyAuthorInputEnvelope {
  data: db_PostCreateManyAuthorInput!
  skipDuplicates: Boolean
}

input db_PostCreateNestedManyWithoutAuthorInput {
  create: db_PostCreateWithoutAuthorInput
  connectOrCreate: db_PostCreateOrConnectWithoutAuthorInput
  createMany: db_PostCreateManyAuthorInputEnvelope
  connect: db_PostWhereUniqueInput
}

input db_UserCreateWithoutSchedulesInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutSchedulesInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutSchedulesInput!
}

input db_UserCreateNestedOneWithoutSchedulesInput {
  create: db_UserCreateWithoutSchedulesInput
  connectOrCreate: db_UserCreateOrConnectWithoutSchedulesInput
  connect: db_UserWhereUniqueInput
}

input db_ScheduleCreateWithoutMatchInput {
  id: String
  date: DateTime!
  location: String!
  createdAt: DateTime
  User: db_UserCreateNestedOneWithoutSchedulesInput
}

input db_ScheduleCreateOrConnectWithoutMatchInput {
  where: db_ScheduleWhereUniqueInput!
  create: db_ScheduleCreateWithoutMatchInput!
}

input db_ScheduleCreateManyMatchInput {
  id: String
  date: DateTime!
  location: String!
  createdAt: DateTime
  userId: String
}

input db_ScheduleCreateManyMatchInputEnvelope {
  data: db_ScheduleCreateManyMatchInput!
  skipDuplicates: Boolean
}

input db_ScheduleCreateNestedManyWithoutMatchInput {
  create: db_ScheduleCreateWithoutMatchInput
  connectOrCreate: db_ScheduleCreateOrConnectWithoutMatchInput
  createMany: db_ScheduleCreateManyMatchInputEnvelope
  connect: db_ScheduleWhereUniqueInput
}

input db_MatchCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  cosplayer: db_UserCreateNestedOneWithoutCosplayerMatchesInput!
  photographer: db_UserCreateNestedOneWithoutPhotographerMatchesInput!
  Schedule: db_ScheduleCreateNestedManyWithoutMatchInput
}

input db_MatchCreateOrConnectWithoutUserInput {
  where: db_MatchWhereUniqueInput!
  create: db_MatchCreateWithoutUserInput!
}

input db_MatchCreateManyUserInput {
  id: String
  cosplayerId: String!
  photographerId: String!
  createdAt: DateTime
}

input db_MatchCreateManyUserInputEnvelope {
  data: db_MatchCreateManyUserInput!
  skipDuplicates: Boolean
}

input db_MatchCreateNestedManyWithoutUserInput {
  create: db_MatchCreateWithoutUserInput
  connectOrCreate: db_MatchCreateOrConnectWithoutUserInput
  createMany: db_MatchCreateManyUserInputEnvelope
  connect: db_MatchWhereUniqueInput
}

input db_UserCreateWithoutSentMessagesInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutSentMessagesInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutSentMessagesInput!
}

input db_UserCreateNestedOneWithoutSentMessagesInput {
  create: db_UserCreateWithoutSentMessagesInput
  connectOrCreate: db_UserCreateOrConnectWithoutSentMessagesInput
  connect: db_UserWhereUniqueInput
}

input db_UserCreateWithoutMessageInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutMessageInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutMessageInput!
}

input db_UserCreateNestedOneWithoutMessageInput {
  create: db_UserCreateWithoutMessageInput
  connectOrCreate: db_UserCreateOrConnectWithoutMessageInput
  connect: db_UserWhereUniqueInput
}

input db_MessageCreateWithoutReceiverInput {
  id: String
  content: String!
  createdAt: DateTime
  sender: db_UserCreateNestedOneWithoutSentMessagesInput!
  User: db_UserCreateNestedOneWithoutMessageInput
}

input db_MessageCreateOrConnectWithoutReceiverInput {
  where: db_MessageWhereUniqueInput!
  create: db_MessageCreateWithoutReceiverInput!
}

input db_MessageCreateManyReceiverInput {
  id: String
  senderId: String!
  content: String!
  createdAt: DateTime
  userId: String
}

input db_MessageCreateManyReceiverInputEnvelope {
  data: db_MessageCreateManyReceiverInput!
  skipDuplicates: Boolean
}

input db_MessageCreateNestedManyWithoutReceiverInput {
  create: db_MessageCreateWithoutReceiverInput
  connectOrCreate: db_MessageCreateOrConnectWithoutReceiverInput
  createMany: db_MessageCreateManyReceiverInputEnvelope
  connect: db_MessageWhereUniqueInput
}

input db_UserCreateWithoutGivenReviewsInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutGivenReviewsInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutGivenReviewsInput!
}

input db_UserCreateNestedOneWithoutGivenReviewsInput {
  create: db_UserCreateWithoutGivenReviewsInput
  connectOrCreate: db_UserCreateOrConnectWithoutGivenReviewsInput
  connect: db_UserWhereUniqueInput
}

input db_UserCreateWithoutReviewInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutReviewInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutReviewInput!
}

input db_UserCreateNestedOneWithoutReviewInput {
  create: db_UserCreateWithoutReviewInput
  connectOrCreate: db_UserCreateOrConnectWithoutReviewInput
  connect: db_UserWhereUniqueInput
}

input db_ReviewCreateWithoutRevieweeInput {
  id: String
  rating: Int!
  comment: String
  createdAt: DateTime
  reviewer: db_UserCreateNestedOneWithoutGivenReviewsInput!
  User: db_UserCreateNestedOneWithoutReviewInput
}

input db_ReviewCreateOrConnectWithoutRevieweeInput {
  where: db_ReviewWhereUniqueInput!
  create: db_ReviewCreateWithoutRevieweeInput!
}

input db_ReviewCreateManyRevieweeInput {
  id: String
  reviewerId: String!
  rating: Int!
  comment: String
  createdAt: DateTime
  userId: String
}

input db_ReviewCreateManyRevieweeInputEnvelope {
  data: db_ReviewCreateManyRevieweeInput!
  skipDuplicates: Boolean
}

input db_ReviewCreateNestedManyWithoutRevieweeInput {
  create: db_ReviewCreateWithoutRevieweeInput
  connectOrCreate: db_ReviewCreateOrConnectWithoutRevieweeInput
  createMany: db_ReviewCreateManyRevieweeInputEnvelope
  connect: db_ReviewWhereUniqueInput
}

input db_UserCreateWithoutReceivedMessagesInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutReceivedMessagesInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutReceivedMessagesInput!
}

input db_UserCreateNestedOneWithoutReceivedMessagesInput {
  create: db_UserCreateWithoutReceivedMessagesInput
  connectOrCreate: db_UserCreateOrConnectWithoutReceivedMessagesInput
  connect: db_UserWhereUniqueInput
}

input db_MessageCreateWithoutSenderInput {
  id: String
  content: String!
  createdAt: DateTime
  receiver: db_UserCreateNestedOneWithoutReceivedMessagesInput!
  User: db_UserCreateNestedOneWithoutMessageInput
}

input db_MessageCreateOrConnectWithoutSenderInput {
  where: db_MessageWhereUniqueInput!
  create: db_MessageCreateWithoutSenderInput!
}

input db_MessageCreateManySenderInput {
  id: String
  receiverId: String!
  content: String!
  createdAt: DateTime
  userId: String
}

input db_MessageCreateManySenderInputEnvelope {
  data: db_MessageCreateManySenderInput!
  skipDuplicates: Boolean
}

input db_MessageCreateNestedManyWithoutSenderInput {
  create: db_MessageCreateWithoutSenderInput
  connectOrCreate: db_MessageCreateOrConnectWithoutSenderInput
  createMany: db_MessageCreateManySenderInputEnvelope
  connect: db_MessageWhereUniqueInput
}

input db_UserCreateWithoutReceivedReviewsInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutReceivedReviewsInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutReceivedReviewsInput!
}

input db_UserCreateNestedOneWithoutReceivedReviewsInput {
  create: db_UserCreateWithoutReceivedReviewsInput
  connectOrCreate: db_UserCreateOrConnectWithoutReceivedReviewsInput
  connect: db_UserWhereUniqueInput
}

input db_ReviewCreateWithoutReviewerInput {
  id: String
  rating: Int!
  comment: String
  createdAt: DateTime
  reviewee: db_UserCreateNestedOneWithoutReceivedReviewsInput!
  User: db_UserCreateNestedOneWithoutReviewInput
}

input db_ReviewCreateOrConnectWithoutReviewerInput {
  where: db_ReviewWhereUniqueInput!
  create: db_ReviewCreateWithoutReviewerInput!
}

input db_ReviewCreateManyReviewerInput {
  id: String
  revieweeId: String!
  rating: Int!
  comment: String
  createdAt: DateTime
  userId: String
}

input db_ReviewCreateManyReviewerInputEnvelope {
  data: db_ReviewCreateManyReviewerInput!
  skipDuplicates: Boolean
}

input db_ReviewCreateNestedManyWithoutReviewerInput {
  create: db_ReviewCreateWithoutReviewerInput
  connectOrCreate: db_ReviewCreateOrConnectWithoutReviewerInput
  createMany: db_ReviewCreateManyReviewerInputEnvelope
  connect: db_ReviewWhereUniqueInput
}

input db_UserCreateWithoutMatchInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutMatchInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutMatchInput!
}

input db_UserCreateNestedOneWithoutMatchInput {
  create: db_UserCreateWithoutMatchInput
  connectOrCreate: db_UserCreateOrConnectWithoutMatchInput
  connect: db_UserWhereUniqueInput
}

input db_MatchCreateWithoutPhotographerInput {
  id: String
  createdAt: DateTime
  cosplayer: db_UserCreateNestedOneWithoutCosplayerMatchesInput!
  User: db_UserCreateNestedOneWithoutMatchInput
  Schedule: db_ScheduleCreateNestedManyWithoutMatchInput
}

input db_MatchCreateOrConnectWithoutPhotographerInput {
  where: db_MatchWhereUniqueInput!
  create: db_MatchCreateWithoutPhotographerInput!
}

input db_MatchCreateManyPhotographerInput {
  id: String
  cosplayerId: String!
  createdAt: DateTime
  userId: String
}

input db_MatchCreateManyPhotographerInputEnvelope {
  data: db_MatchCreateManyPhotographerInput!
  skipDuplicates: Boolean
}

input db_MatchCreateNestedManyWithoutPhotographerInput {
  create: db_MatchCreateWithoutPhotographerInput
  connectOrCreate: db_MatchCreateOrConnectWithoutPhotographerInput
  createMany: db_MatchCreateManyPhotographerInputEnvelope
  connect: db_MatchWhereUniqueInput
}

input db_UserCreateWithoutCosplayerMatchesInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutCosplayerMatchesInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutCosplayerMatchesInput!
}

input db_UserCreateNestedOneWithoutCosplayerMatchesInput {
  create: db_UserCreateWithoutCosplayerMatchesInput
  connectOrCreate: db_UserCreateOrConnectWithoutCosplayerMatchesInput
  connect: db_UserWhereUniqueInput
}

input db_MatchCreateWithoutScheduleInput {
  id: String
  createdAt: DateTime
  cosplayer: db_UserCreateNestedOneWithoutCosplayerMatchesInput!
  photographer: db_UserCreateNestedOneWithoutPhotographerMatchesInput!
  User: db_UserCreateNestedOneWithoutMatchInput
}

input db_MatchCreateOrConnectWithoutScheduleInput {
  where: db_MatchWhereUniqueInput!
  create: db_MatchCreateWithoutScheduleInput!
}

input db_MatchCreateNestedOneWithoutScheduleInput {
  create: db_MatchCreateWithoutScheduleInput
  connectOrCreate: db_MatchCreateOrConnectWithoutScheduleInput
  connect: db_MatchWhereUniqueInput
}

input db_ScheduleCreateWithoutUserInput {
  id: String
  date: DateTime!
  location: String!
  createdAt: DateTime
  match: db_MatchCreateNestedOneWithoutScheduleInput!
}

input db_ScheduleCreateOrConnectWithoutUserInput {
  where: db_ScheduleWhereUniqueInput!
  create: db_ScheduleCreateWithoutUserInput!
}

input db_ScheduleCreateManyUserInput {
  id: String
  matchId: String!
  date: DateTime!
  location: String!
  createdAt: DateTime
}

input db_ScheduleCreateManyUserInputEnvelope {
  data: db_ScheduleCreateManyUserInput!
  skipDuplicates: Boolean
}

input db_ScheduleCreateNestedManyWithoutUserInput {
  create: db_ScheduleCreateWithoutUserInput
  connectOrCreate: db_ScheduleCreateOrConnectWithoutUserInput
  createMany: db_ScheduleCreateManyUserInputEnvelope
  connect: db_ScheduleWhereUniqueInput
}

input db_UserCreateWithoutPhotographerMatchesInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutPhotographerMatchesInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutPhotographerMatchesInput!
}

input db_UserCreateNestedOneWithoutPhotographerMatchesInput {
  create: db_UserCreateWithoutPhotographerMatchesInput
  connectOrCreate: db_UserCreateOrConnectWithoutPhotographerMatchesInput
  connect: db_UserWhereUniqueInput
}

input db_MatchCreateWithoutCosplayerInput {
  id: String
  createdAt: DateTime
  photographer: db_UserCreateNestedOneWithoutPhotographerMatchesInput!
  User: db_UserCreateNestedOneWithoutMatchInput
  Schedule: db_ScheduleCreateNestedManyWithoutMatchInput
}

input db_MatchCreateOrConnectWithoutCosplayerInput {
  where: db_MatchWhereUniqueInput!
  create: db_MatchCreateWithoutCosplayerInput!
}

input db_MatchCreateManyCosplayerInput {
  id: String
  photographerId: String!
  createdAt: DateTime
  userId: String
}

input db_MatchCreateManyCosplayerInputEnvelope {
  data: db_MatchCreateManyCosplayerInput!
  skipDuplicates: Boolean
}

input db_MatchCreateNestedManyWithoutCosplayerInput {
  create: db_MatchCreateWithoutCosplayerInput
  connectOrCreate: db_MatchCreateOrConnectWithoutCosplayerInput
  createMany: db_MatchCreateManyCosplayerInputEnvelope
  connect: db_MatchWhereUniqueInput
}

input db_UserCreateWithoutAccountInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutAccountInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutAccountInput!
}

input db_UserCreateNestedOneWithoutAccountInput {
  create: db_UserCreateWithoutAccountInput
  connectOrCreate: db_UserCreateOrConnectWithoutAccountInput
  connect: db_UserWhereUniqueInput
}

input db_AccountCreateInput {
  id: String
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
  user: db_UserCreateNestedOneWithoutAccountInput!
}

input db_StringFieldUpdateOperationsInput {
  set: String
}

input db_NullableStringFieldUpdateOperationsInput {
  set: String
}

input db_NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input db_NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input db_DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input db_IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input db_NotificationUpdateWithoutUserInput {
  id: db_StringFieldUpdateOperationsInput
  content: db_StringFieldUpdateOperationsInput
  type: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
}

input db_NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: db_NotificationWhereUniqueInput!
  update: db_NotificationUpdateWithoutUserInput!
  create: db_NotificationCreateWithoutUserInput!
}

input db_NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: db_NotificationWhereUniqueInput!
  data: db_NotificationUpdateWithoutUserInput!
}

input db_NotificationScalarWhereInput {
  AND: db_NotificationScalarWhereInput
  OR: [db_NotificationScalarWhereInput]
  NOT: db_NotificationScalarWhereInput
  id: db_StringFilter
  userId: db_StringFilter
  content: db_StringFilter
  type: db_StringFilter
  createdAt: db_DateTimeFilter
}

input db_NotificationUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  content: db_StringFieldUpdateOperationsInput
  type: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
}

input db_NotificationUpdateManyWithWhereWithoutUserInput {
  where: db_NotificationScalarWhereInput!
  data: db_NotificationUpdateManyMutationInput!
}

input db_NotificationUpdateManyWithoutUserNestedInput {
  create: db_NotificationCreateWithoutUserInput
  connectOrCreate: db_NotificationCreateOrConnectWithoutUserInput
  upsert: db_NotificationUpsertWithWhereUniqueWithoutUserInput
  createMany: db_NotificationCreateManyUserInputEnvelope
  set: db_NotificationWhereUniqueInput
  disconnect: db_NotificationWhereUniqueInput
  delete: db_NotificationWhereUniqueInput
  connect: db_NotificationWhereUniqueInput
  update: db_NotificationUpdateWithWhereUniqueWithoutUserInput
  updateMany: db_NotificationUpdateManyWithWhereWithoutUserInput
  deleteMany: db_NotificationScalarWhereInput
}

input db_InvitationUpdateWithoutInvitedPhotographerInput {
  id: db_StringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  status: db_InviteStatus
  createdAt: db_DateTimeFieldUpdateOperationsInput
}

input db_InvitationUpsertWithWhereUniqueWithoutInvitedPhotographerInput {
  where: db_InvitationWhereUniqueInput!
  update: db_InvitationUpdateWithoutInvitedPhotographerInput!
  create: db_InvitationCreateWithoutInvitedPhotographerInput!
}

input db_InvitationUpdateWithWhereUniqueWithoutInvitedPhotographerInput {
  where: db_InvitationWhereUniqueInput!
  data: db_InvitationUpdateWithoutInvitedPhotographerInput!
}

input db_InvitationScalarWhereInput {
  AND: db_InvitationScalarWhereInput
  OR: [db_InvitationScalarWhereInput]
  NOT: db_InvitationScalarWhereInput
  id: db_StringFilter
  email: db_StringFilter
  status: db_EnumInviteStatusFilter
  createdAt: db_DateTimeFilter
  invitedBy: db_StringFilter
}

input db_InvitationUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  status: db_InviteStatus
  createdAt: db_DateTimeFieldUpdateOperationsInput
}

input db_InvitationUpdateManyWithWhereWithoutInvitedPhotographerInput {
  where: db_InvitationScalarWhereInput!
  data: db_InvitationUpdateManyMutationInput!
}

input db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput {
  create: db_InvitationCreateWithoutInvitedPhotographerInput
  connectOrCreate: db_InvitationCreateOrConnectWithoutInvitedPhotographerInput
  upsert: db_InvitationUpsertWithWhereUniqueWithoutInvitedPhotographerInput
  createMany: db_InvitationCreateManyInvitedPhotographerInputEnvelope
  set: db_InvitationWhereUniqueInput
  disconnect: db_InvitationWhereUniqueInput
  delete: db_InvitationWhereUniqueInput
  connect: db_InvitationWhereUniqueInput
  update: db_InvitationUpdateWithWhereUniqueWithoutInvitedPhotographerInput
  updateMany: db_InvitationUpdateManyWithWhereWithoutInvitedPhotographerInput
  deleteMany: db_InvitationScalarWhereInput
}

input db_ReviewUpdateWithoutUserInput {
  id: db_StringFieldUpdateOperationsInput
  rating: db_IntFieldUpdateOperationsInput
  comment: db_NullableStringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  reviewer: db_UserUpdateOneRequiredWithoutGivenReviewsNestedInput
  reviewee: db_UserUpdateOneRequiredWithoutReceivedReviewsNestedInput
}

input db_ReviewUpsertWithWhereUniqueWithoutUserInput {
  where: db_ReviewWhereUniqueInput!
  update: db_ReviewUpdateWithoutUserInput!
  create: db_ReviewCreateWithoutUserInput!
}

input db_ReviewUpdateWithWhereUniqueWithoutUserInput {
  where: db_ReviewWhereUniqueInput!
  data: db_ReviewUpdateWithoutUserInput!
}

input db_ReviewScalarWhereInput {
  AND: db_ReviewScalarWhereInput
  OR: [db_ReviewScalarWhereInput]
  NOT: db_ReviewScalarWhereInput
  id: db_StringFilter
  reviewerId: db_StringFilter
  revieweeId: db_StringFilter
  rating: db_IntFilter
  comment: db_StringNullableFilter
  createdAt: db_DateTimeFilter
  userId: db_StringNullableFilter
}

input db_ReviewUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  rating: db_IntFieldUpdateOperationsInput
  comment: db_NullableStringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
}

input db_ReviewUpdateManyWithWhereWithoutUserInput {
  where: db_ReviewScalarWhereInput!
  data: db_ReviewUpdateManyMutationInput!
}

input db_ReviewUpdateManyWithoutUserNestedInput {
  create: db_ReviewCreateWithoutUserInput
  connectOrCreate: db_ReviewCreateOrConnectWithoutUserInput
  upsert: db_ReviewUpsertWithWhereUniqueWithoutUserInput
  createMany: db_ReviewCreateManyUserInputEnvelope
  set: db_ReviewWhereUniqueInput
  disconnect: db_ReviewWhereUniqueInput
  delete: db_ReviewWhereUniqueInput
  connect: db_ReviewWhereUniqueInput
  update: db_ReviewUpdateWithWhereUniqueWithoutUserInput
  updateMany: db_ReviewUpdateManyWithWhereWithoutUserInput
  deleteMany: db_ReviewScalarWhereInput
}

input db_MessageUpdateWithoutUserInput {
  id: db_StringFieldUpdateOperationsInput
  content: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  sender: db_UserUpdateOneRequiredWithoutSentMessagesNestedInput
  receiver: db_UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
}

input db_MessageUpsertWithWhereUniqueWithoutUserInput {
  where: db_MessageWhereUniqueInput!
  update: db_MessageUpdateWithoutUserInput!
  create: db_MessageCreateWithoutUserInput!
}

input db_MessageUpdateWithWhereUniqueWithoutUserInput {
  where: db_MessageWhereUniqueInput!
  data: db_MessageUpdateWithoutUserInput!
}

input db_MessageScalarWhereInput {
  AND: db_MessageScalarWhereInput
  OR: [db_MessageScalarWhereInput]
  NOT: db_MessageScalarWhereInput
  id: db_StringFilter
  senderId: db_StringFilter
  receiverId: db_StringFilter
  content: db_StringFilter
  createdAt: db_DateTimeFilter
  userId: db_StringNullableFilter
}

input db_MessageUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  content: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
}

input db_MessageUpdateManyWithWhereWithoutUserInput {
  where: db_MessageScalarWhereInput!
  data: db_MessageUpdateManyMutationInput!
}

input db_MessageUpdateManyWithoutUserNestedInput {
  create: db_MessageCreateWithoutUserInput
  connectOrCreate: db_MessageCreateOrConnectWithoutUserInput
  upsert: db_MessageUpsertWithWhereUniqueWithoutUserInput
  createMany: db_MessageCreateManyUserInputEnvelope
  set: db_MessageWhereUniqueInput
  disconnect: db_MessageWhereUniqueInput
  delete: db_MessageWhereUniqueInput
  connect: db_MessageWhereUniqueInput
  update: db_MessageUpdateWithWhereUniqueWithoutUserInput
  updateMany: db_MessageUpdateManyWithWhereWithoutUserInput
  deleteMany: db_MessageScalarWhereInput
}

input db_AccountUpdateWithoutUserInput {
  id: db_StringFieldUpdateOperationsInput
  type: db_StringFieldUpdateOperationsInput
  provider: db_StringFieldUpdateOperationsInput
  providerAccountId: db_StringFieldUpdateOperationsInput
  refresh_token: db_NullableStringFieldUpdateOperationsInput
  access_token: db_NullableStringFieldUpdateOperationsInput
  expires_at: db_NullableIntFieldUpdateOperationsInput
  token_type: db_NullableStringFieldUpdateOperationsInput
  scope: db_NullableStringFieldUpdateOperationsInput
  id_token: db_NullableStringFieldUpdateOperationsInput
  session_state: db_NullableStringFieldUpdateOperationsInput
}

input db_AccountUpsertWithWhereUniqueWithoutUserInput {
  where: db_AccountWhereUniqueInput!
  update: db_AccountUpdateWithoutUserInput!
  create: db_AccountCreateWithoutUserInput!
}

input db_AccountUpdateWithWhereUniqueWithoutUserInput {
  where: db_AccountWhereUniqueInput!
  data: db_AccountUpdateWithoutUserInput!
}

input db_AccountScalarWhereInput {
  AND: db_AccountScalarWhereInput
  OR: [db_AccountScalarWhereInput]
  NOT: db_AccountScalarWhereInput
  id: db_StringFilter
  userId: db_StringFilter
  type: db_StringFilter
  provider: db_StringFilter
  providerAccountId: db_StringFilter
  refresh_token: db_StringNullableFilter
  access_token: db_StringNullableFilter
  expires_at: db_IntNullableFilter
  token_type: db_StringNullableFilter
  scope: db_StringNullableFilter
  id_token: db_StringNullableFilter
  session_state: db_StringNullableFilter
}

input db_AccountUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  type: db_StringFieldUpdateOperationsInput
  provider: db_StringFieldUpdateOperationsInput
  providerAccountId: db_StringFieldUpdateOperationsInput
  refresh_token: db_NullableStringFieldUpdateOperationsInput
  access_token: db_NullableStringFieldUpdateOperationsInput
  expires_at: db_NullableIntFieldUpdateOperationsInput
  token_type: db_NullableStringFieldUpdateOperationsInput
  scope: db_NullableStringFieldUpdateOperationsInput
  id_token: db_NullableStringFieldUpdateOperationsInput
  session_state: db_NullableStringFieldUpdateOperationsInput
}

input db_AccountUpdateManyWithWhereWithoutUserInput {
  where: db_AccountScalarWhereInput!
  data: db_AccountUpdateManyMutationInput!
}

input db_AccountUpdateManyWithoutUserNestedInput {
  create: db_AccountCreateWithoutUserInput
  connectOrCreate: db_AccountCreateOrConnectWithoutUserInput
  upsert: db_AccountUpsertWithWhereUniqueWithoutUserInput
  createMany: db_AccountCreateManyUserInputEnvelope
  set: db_AccountWhereUniqueInput
  disconnect: db_AccountWhereUniqueInput
  delete: db_AccountWhereUniqueInput
  connect: db_AccountWhereUniqueInput
  update: db_AccountUpdateWithWhereUniqueWithoutUserInput
  updateMany: db_AccountUpdateManyWithWhereWithoutUserInput
  deleteMany: db_AccountScalarWhereInput
}

input db_SessionUpdateWithoutUserInput {
  id: db_StringFieldUpdateOperationsInput
  sessionToken: db_StringFieldUpdateOperationsInput
  expires: db_DateTimeFieldUpdateOperationsInput
}

input db_SessionUpsertWithWhereUniqueWithoutUserInput {
  where: db_SessionWhereUniqueInput!
  update: db_SessionUpdateWithoutUserInput!
  create: db_SessionCreateWithoutUserInput!
}

input db_SessionUpdateWithWhereUniqueWithoutUserInput {
  where: db_SessionWhereUniqueInput!
  data: db_SessionUpdateWithoutUserInput!
}

input db_SessionScalarWhereInput {
  AND: db_SessionScalarWhereInput
  OR: [db_SessionScalarWhereInput]
  NOT: db_SessionScalarWhereInput
  id: db_StringFilter
  sessionToken: db_StringFilter
  userId: db_StringFilter
  expires: db_DateTimeFilter
}

input db_SessionUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  sessionToken: db_StringFieldUpdateOperationsInput
  expires: db_DateTimeFieldUpdateOperationsInput
}

input db_SessionUpdateManyWithWhereWithoutUserInput {
  where: db_SessionScalarWhereInput!
  data: db_SessionUpdateManyMutationInput!
}

input db_SessionUpdateManyWithoutUserNestedInput {
  create: db_SessionCreateWithoutUserInput
  connectOrCreate: db_SessionCreateOrConnectWithoutUserInput
  upsert: db_SessionUpsertWithWhereUniqueWithoutUserInput
  createMany: db_SessionCreateManyUserInputEnvelope
  set: db_SessionWhereUniqueInput
  disconnect: db_SessionWhereUniqueInput
  delete: db_SessionWhereUniqueInput
  connect: db_SessionWhereUniqueInput
  update: db_SessionUpdateWithWhereUniqueWithoutUserInput
  updateMany: db_SessionUpdateManyWithWhereWithoutUserInput
  deleteMany: db_SessionScalarWhereInput
}

input db_BoolFieldUpdateOperationsInput {
  set: Boolean
}

input db_TodoUpdateWithoutUserInput {
  id: db_StringFieldUpdateOperationsInput
  text: db_StringFieldUpdateOperationsInput
  isCompleted: db_BoolFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
}

input db_TodoUpsertWithWhereUniqueWithoutUserInput {
  where: db_TodoWhereUniqueInput!
  update: db_TodoUpdateWithoutUserInput!
  create: db_TodoCreateWithoutUserInput!
}

input db_TodoUpdateWithWhereUniqueWithoutUserInput {
  where: db_TodoWhereUniqueInput!
  data: db_TodoUpdateWithoutUserInput!
}

input db_TodoScalarWhereInput {
  AND: db_TodoScalarWhereInput
  OR: [db_TodoScalarWhereInput]
  NOT: db_TodoScalarWhereInput
  id: db_StringFilter
  text: db_StringFilter
  isCompleted: db_BoolFilter
  createdAt: db_DateTimeFilter
  updatedAt: db_DateTimeFilter
  userId: db_StringFilter
}

input db_TodoUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  text: db_StringFieldUpdateOperationsInput
  isCompleted: db_BoolFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
}

input db_TodoUpdateManyWithWhereWithoutUserInput {
  where: db_TodoScalarWhereInput!
  data: db_TodoUpdateManyMutationInput!
}

input db_TodoUpdateManyWithoutUserNestedInput {
  create: db_TodoCreateWithoutUserInput
  connectOrCreate: db_TodoCreateOrConnectWithoutUserInput
  upsert: db_TodoUpsertWithWhereUniqueWithoutUserInput
  createMany: db_TodoCreateManyUserInputEnvelope
  set: db_TodoWhereUniqueInput
  disconnect: db_TodoWhereUniqueInput
  delete: db_TodoWhereUniqueInput
  connect: db_TodoWhereUniqueInput
  update: db_TodoUpdateWithWhereUniqueWithoutUserInput
  updateMany: db_TodoUpdateManyWithWhereWithoutUserInput
  deleteMany: db_TodoScalarWhereInput
}

input db_PostUpdateWithoutAuthorInput {
  id: db_StringFieldUpdateOperationsInput
  title: db_StringFieldUpdateOperationsInput
  content: db_NullableJsonNullValueInput
  published: db_BoolFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
}

input db_PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: db_PostWhereUniqueInput!
  update: db_PostUpdateWithoutAuthorInput!
  create: db_PostCreateWithoutAuthorInput!
}

input db_PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: db_PostWhereUniqueInput!
  data: db_PostUpdateWithoutAuthorInput!
}

input db_PostScalarWhereInput {
  AND: db_PostScalarWhereInput
  OR: [db_PostScalarWhereInput]
  NOT: db_PostScalarWhereInput
  id: db_StringFilter
  title: db_StringFilter
  content: db_JsonNullableFilter
  published: db_BoolFilter
  createdAt: db_DateTimeFilter
  updatedAt: db_DateTimeFilter
  authorId: db_StringFilter
}

input db_PostUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  title: db_StringFieldUpdateOperationsInput
  content: db_NullableJsonNullValueInput
  published: db_BoolFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
}

input db_PostUpdateManyWithWhereWithoutAuthorInput {
  where: db_PostScalarWhereInput!
  data: db_PostUpdateManyMutationInput!
}

input db_PostUpdateManyWithoutAuthorNestedInput {
  create: db_PostCreateWithoutAuthorInput
  connectOrCreate: db_PostCreateOrConnectWithoutAuthorInput
  upsert: db_PostUpsertWithWhereUniqueWithoutAuthorInput
  createMany: db_PostCreateManyAuthorInputEnvelope
  set: db_PostWhereUniqueInput
  disconnect: db_PostWhereUniqueInput
  delete: db_PostWhereUniqueInput
  connect: db_PostWhereUniqueInput
  update: db_PostUpdateWithWhereUniqueWithoutAuthorInput
  updateMany: db_PostUpdateManyWithWhereWithoutAuthorInput
  deleteMany: db_PostScalarWhereInput
}

input db_UserUpdateWithoutSchedulesInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutSchedulesInput {
  update: db_UserUpdateWithoutSchedulesInput!
  create: db_UserCreateWithoutSchedulesInput!
}

input db_UserUpdateOneWithoutSchedulesNestedInput {
  create: db_UserCreateWithoutSchedulesInput
  connectOrCreate: db_UserCreateOrConnectWithoutSchedulesInput
  upsert: db_UserUpsertWithoutSchedulesInput
  disconnect: Boolean
  delete: Boolean
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutSchedulesInput
}

input db_ScheduleUpdateWithoutMatchInput {
  id: db_StringFieldUpdateOperationsInput
  date: db_DateTimeFieldUpdateOperationsInput
  location: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  User: db_UserUpdateOneWithoutSchedulesNestedInput
}

input db_ScheduleUpsertWithWhereUniqueWithoutMatchInput {
  where: db_ScheduleWhereUniqueInput!
  update: db_ScheduleUpdateWithoutMatchInput!
  create: db_ScheduleCreateWithoutMatchInput!
}

input db_ScheduleUpdateWithWhereUniqueWithoutMatchInput {
  where: db_ScheduleWhereUniqueInput!
  data: db_ScheduleUpdateWithoutMatchInput!
}

input db_ScheduleScalarWhereInput {
  AND: db_ScheduleScalarWhereInput
  OR: [db_ScheduleScalarWhereInput]
  NOT: db_ScheduleScalarWhereInput
  id: db_StringFilter
  matchId: db_StringFilter
  date: db_DateTimeFilter
  location: db_StringFilter
  createdAt: db_DateTimeFilter
  userId: db_StringNullableFilter
}

input db_ScheduleUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  date: db_DateTimeFieldUpdateOperationsInput
  location: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
}

input db_ScheduleUpdateManyWithWhereWithoutMatchInput {
  where: db_ScheduleScalarWhereInput!
  data: db_ScheduleUpdateManyMutationInput!
}

input db_ScheduleUpdateManyWithoutMatchNestedInput {
  create: db_ScheduleCreateWithoutMatchInput
  connectOrCreate: db_ScheduleCreateOrConnectWithoutMatchInput
  upsert: db_ScheduleUpsertWithWhereUniqueWithoutMatchInput
  createMany: db_ScheduleCreateManyMatchInputEnvelope
  set: db_ScheduleWhereUniqueInput
  disconnect: db_ScheduleWhereUniqueInput
  delete: db_ScheduleWhereUniqueInput
  connect: db_ScheduleWhereUniqueInput
  update: db_ScheduleUpdateWithWhereUniqueWithoutMatchInput
  updateMany: db_ScheduleUpdateManyWithWhereWithoutMatchInput
  deleteMany: db_ScheduleScalarWhereInput
}

input db_MatchUpdateWithoutUserInput {
  id: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  cosplayer: db_UserUpdateOneRequiredWithoutCosplayerMatchesNestedInput
  photographer: db_UserUpdateOneRequiredWithoutPhotographerMatchesNestedInput
  Schedule: db_ScheduleUpdateManyWithoutMatchNestedInput
}

input db_MatchUpsertWithWhereUniqueWithoutUserInput {
  where: db_MatchWhereUniqueInput!
  update: db_MatchUpdateWithoutUserInput!
  create: db_MatchCreateWithoutUserInput!
}

input db_MatchUpdateWithWhereUniqueWithoutUserInput {
  where: db_MatchWhereUniqueInput!
  data: db_MatchUpdateWithoutUserInput!
}

input db_MatchScalarWhereInput {
  AND: db_MatchScalarWhereInput
  OR: [db_MatchScalarWhereInput]
  NOT: db_MatchScalarWhereInput
  id: db_StringFilter
  cosplayerId: db_StringFilter
  photographerId: db_StringFilter
  createdAt: db_DateTimeFilter
  userId: db_StringNullableFilter
}

input db_MatchUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
}

input db_MatchUpdateManyWithWhereWithoutUserInput {
  where: db_MatchScalarWhereInput!
  data: db_MatchUpdateManyMutationInput!
}

input db_MatchUpdateManyWithoutUserNestedInput {
  create: db_MatchCreateWithoutUserInput
  connectOrCreate: db_MatchCreateOrConnectWithoutUserInput
  upsert: db_MatchUpsertWithWhereUniqueWithoutUserInput
  createMany: db_MatchCreateManyUserInputEnvelope
  set: db_MatchWhereUniqueInput
  disconnect: db_MatchWhereUniqueInput
  delete: db_MatchWhereUniqueInput
  connect: db_MatchWhereUniqueInput
  update: db_MatchUpdateWithWhereUniqueWithoutUserInput
  updateMany: db_MatchUpdateManyWithWhereWithoutUserInput
  deleteMany: db_MatchScalarWhereInput
}

input db_UserUpdateWithoutSentMessagesInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutSentMessagesInput {
  update: db_UserUpdateWithoutSentMessagesInput!
  create: db_UserCreateWithoutSentMessagesInput!
}

input db_UserUpdateOneRequiredWithoutSentMessagesNestedInput {
  create: db_UserCreateWithoutSentMessagesInput
  connectOrCreate: db_UserCreateOrConnectWithoutSentMessagesInput
  upsert: db_UserUpsertWithoutSentMessagesInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutSentMessagesInput
}

input db_UserUpdateWithoutMessageInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutMessageInput {
  update: db_UserUpdateWithoutMessageInput!
  create: db_UserCreateWithoutMessageInput!
}

input db_UserUpdateOneWithoutMessageNestedInput {
  create: db_UserCreateWithoutMessageInput
  connectOrCreate: db_UserCreateOrConnectWithoutMessageInput
  upsert: db_UserUpsertWithoutMessageInput
  disconnect: Boolean
  delete: Boolean
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutMessageInput
}

input db_MessageUpdateWithoutReceiverInput {
  id: db_StringFieldUpdateOperationsInput
  content: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  sender: db_UserUpdateOneRequiredWithoutSentMessagesNestedInput
  User: db_UserUpdateOneWithoutMessageNestedInput
}

input db_MessageUpsertWithWhereUniqueWithoutReceiverInput {
  where: db_MessageWhereUniqueInput!
  update: db_MessageUpdateWithoutReceiverInput!
  create: db_MessageCreateWithoutReceiverInput!
}

input db_MessageUpdateWithWhereUniqueWithoutReceiverInput {
  where: db_MessageWhereUniqueInput!
  data: db_MessageUpdateWithoutReceiverInput!
}

input db_MessageUpdateManyWithWhereWithoutReceiverInput {
  where: db_MessageScalarWhereInput!
  data: db_MessageUpdateManyMutationInput!
}

input db_MessageUpdateManyWithoutReceiverNestedInput {
  create: db_MessageCreateWithoutReceiverInput
  connectOrCreate: db_MessageCreateOrConnectWithoutReceiverInput
  upsert: db_MessageUpsertWithWhereUniqueWithoutReceiverInput
  createMany: db_MessageCreateManyReceiverInputEnvelope
  set: db_MessageWhereUniqueInput
  disconnect: db_MessageWhereUniqueInput
  delete: db_MessageWhereUniqueInput
  connect: db_MessageWhereUniqueInput
  update: db_MessageUpdateWithWhereUniqueWithoutReceiverInput
  updateMany: db_MessageUpdateManyWithWhereWithoutReceiverInput
  deleteMany: db_MessageScalarWhereInput
}

input db_UserUpdateWithoutGivenReviewsInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutGivenReviewsInput {
  update: db_UserUpdateWithoutGivenReviewsInput!
  create: db_UserCreateWithoutGivenReviewsInput!
}

input db_UserUpdateOneRequiredWithoutGivenReviewsNestedInput {
  create: db_UserCreateWithoutGivenReviewsInput
  connectOrCreate: db_UserCreateOrConnectWithoutGivenReviewsInput
  upsert: db_UserUpsertWithoutGivenReviewsInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutGivenReviewsInput
}

input db_UserUpdateWithoutReviewInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutReviewInput {
  update: db_UserUpdateWithoutReviewInput!
  create: db_UserCreateWithoutReviewInput!
}

input db_UserUpdateOneWithoutReviewNestedInput {
  create: db_UserCreateWithoutReviewInput
  connectOrCreate: db_UserCreateOrConnectWithoutReviewInput
  upsert: db_UserUpsertWithoutReviewInput
  disconnect: Boolean
  delete: Boolean
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutReviewInput
}

input db_ReviewUpdateWithoutRevieweeInput {
  id: db_StringFieldUpdateOperationsInput
  rating: db_IntFieldUpdateOperationsInput
  comment: db_NullableStringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  reviewer: db_UserUpdateOneRequiredWithoutGivenReviewsNestedInput
  User: db_UserUpdateOneWithoutReviewNestedInput
}

input db_ReviewUpsertWithWhereUniqueWithoutRevieweeInput {
  where: db_ReviewWhereUniqueInput!
  update: db_ReviewUpdateWithoutRevieweeInput!
  create: db_ReviewCreateWithoutRevieweeInput!
}

input db_ReviewUpdateWithWhereUniqueWithoutRevieweeInput {
  where: db_ReviewWhereUniqueInput!
  data: db_ReviewUpdateWithoutRevieweeInput!
}

input db_ReviewUpdateManyWithWhereWithoutRevieweeInput {
  where: db_ReviewScalarWhereInput!
  data: db_ReviewUpdateManyMutationInput!
}

input db_ReviewUpdateManyWithoutRevieweeNestedInput {
  create: db_ReviewCreateWithoutRevieweeInput
  connectOrCreate: db_ReviewCreateOrConnectWithoutRevieweeInput
  upsert: db_ReviewUpsertWithWhereUniqueWithoutRevieweeInput
  createMany: db_ReviewCreateManyRevieweeInputEnvelope
  set: db_ReviewWhereUniqueInput
  disconnect: db_ReviewWhereUniqueInput
  delete: db_ReviewWhereUniqueInput
  connect: db_ReviewWhereUniqueInput
  update: db_ReviewUpdateWithWhereUniqueWithoutRevieweeInput
  updateMany: db_ReviewUpdateManyWithWhereWithoutRevieweeInput
  deleteMany: db_ReviewScalarWhereInput
}

input db_UserUpdateWithoutReceivedMessagesInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutReceivedMessagesInput {
  update: db_UserUpdateWithoutReceivedMessagesInput!
  create: db_UserCreateWithoutReceivedMessagesInput!
}

input db_UserUpdateOneRequiredWithoutReceivedMessagesNestedInput {
  create: db_UserCreateWithoutReceivedMessagesInput
  connectOrCreate: db_UserCreateOrConnectWithoutReceivedMessagesInput
  upsert: db_UserUpsertWithoutReceivedMessagesInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutReceivedMessagesInput
}

input db_MessageUpdateWithoutSenderInput {
  id: db_StringFieldUpdateOperationsInput
  content: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  receiver: db_UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  User: db_UserUpdateOneWithoutMessageNestedInput
}

input db_MessageUpsertWithWhereUniqueWithoutSenderInput {
  where: db_MessageWhereUniqueInput!
  update: db_MessageUpdateWithoutSenderInput!
  create: db_MessageCreateWithoutSenderInput!
}

input db_MessageUpdateWithWhereUniqueWithoutSenderInput {
  where: db_MessageWhereUniqueInput!
  data: db_MessageUpdateWithoutSenderInput!
}

input db_MessageUpdateManyWithWhereWithoutSenderInput {
  where: db_MessageScalarWhereInput!
  data: db_MessageUpdateManyMutationInput!
}

input db_MessageUpdateManyWithoutSenderNestedInput {
  create: db_MessageCreateWithoutSenderInput
  connectOrCreate: db_MessageCreateOrConnectWithoutSenderInput
  upsert: db_MessageUpsertWithWhereUniqueWithoutSenderInput
  createMany: db_MessageCreateManySenderInputEnvelope
  set: db_MessageWhereUniqueInput
  disconnect: db_MessageWhereUniqueInput
  delete: db_MessageWhereUniqueInput
  connect: db_MessageWhereUniqueInput
  update: db_MessageUpdateWithWhereUniqueWithoutSenderInput
  updateMany: db_MessageUpdateManyWithWhereWithoutSenderInput
  deleteMany: db_MessageScalarWhereInput
}

input db_UserUpdateWithoutReceivedReviewsInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutReceivedReviewsInput {
  update: db_UserUpdateWithoutReceivedReviewsInput!
  create: db_UserCreateWithoutReceivedReviewsInput!
}

input db_UserUpdateOneRequiredWithoutReceivedReviewsNestedInput {
  create: db_UserCreateWithoutReceivedReviewsInput
  connectOrCreate: db_UserCreateOrConnectWithoutReceivedReviewsInput
  upsert: db_UserUpsertWithoutReceivedReviewsInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutReceivedReviewsInput
}

input db_ReviewUpdateWithoutReviewerInput {
  id: db_StringFieldUpdateOperationsInput
  rating: db_IntFieldUpdateOperationsInput
  comment: db_NullableStringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  reviewee: db_UserUpdateOneRequiredWithoutReceivedReviewsNestedInput
  User: db_UserUpdateOneWithoutReviewNestedInput
}

input db_ReviewUpsertWithWhereUniqueWithoutReviewerInput {
  where: db_ReviewWhereUniqueInput!
  update: db_ReviewUpdateWithoutReviewerInput!
  create: db_ReviewCreateWithoutReviewerInput!
}

input db_ReviewUpdateWithWhereUniqueWithoutReviewerInput {
  where: db_ReviewWhereUniqueInput!
  data: db_ReviewUpdateWithoutReviewerInput!
}

input db_ReviewUpdateManyWithWhereWithoutReviewerInput {
  where: db_ReviewScalarWhereInput!
  data: db_ReviewUpdateManyMutationInput!
}

input db_ReviewUpdateManyWithoutReviewerNestedInput {
  create: db_ReviewCreateWithoutReviewerInput
  connectOrCreate: db_ReviewCreateOrConnectWithoutReviewerInput
  upsert: db_ReviewUpsertWithWhereUniqueWithoutReviewerInput
  createMany: db_ReviewCreateManyReviewerInputEnvelope
  set: db_ReviewWhereUniqueInput
  disconnect: db_ReviewWhereUniqueInput
  delete: db_ReviewWhereUniqueInput
  connect: db_ReviewWhereUniqueInput
  update: db_ReviewUpdateWithWhereUniqueWithoutReviewerInput
  updateMany: db_ReviewUpdateManyWithWhereWithoutReviewerInput
  deleteMany: db_ReviewScalarWhereInput
}

input db_UserUpdateWithoutMatchInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutMatchInput {
  update: db_UserUpdateWithoutMatchInput!
  create: db_UserCreateWithoutMatchInput!
}

input db_UserUpdateOneWithoutMatchNestedInput {
  create: db_UserCreateWithoutMatchInput
  connectOrCreate: db_UserCreateOrConnectWithoutMatchInput
  upsert: db_UserUpsertWithoutMatchInput
  disconnect: Boolean
  delete: Boolean
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutMatchInput
}

input db_MatchUpdateWithoutPhotographerInput {
  id: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  cosplayer: db_UserUpdateOneRequiredWithoutCosplayerMatchesNestedInput
  User: db_UserUpdateOneWithoutMatchNestedInput
  Schedule: db_ScheduleUpdateManyWithoutMatchNestedInput
}

input db_MatchUpsertWithWhereUniqueWithoutPhotographerInput {
  where: db_MatchWhereUniqueInput!
  update: db_MatchUpdateWithoutPhotographerInput!
  create: db_MatchCreateWithoutPhotographerInput!
}

input db_MatchUpdateWithWhereUniqueWithoutPhotographerInput {
  where: db_MatchWhereUniqueInput!
  data: db_MatchUpdateWithoutPhotographerInput!
}

input db_MatchUpdateManyWithWhereWithoutPhotographerInput {
  where: db_MatchScalarWhereInput!
  data: db_MatchUpdateManyMutationInput!
}

input db_MatchUpdateManyWithoutPhotographerNestedInput {
  create: db_MatchCreateWithoutPhotographerInput
  connectOrCreate: db_MatchCreateOrConnectWithoutPhotographerInput
  upsert: db_MatchUpsertWithWhereUniqueWithoutPhotographerInput
  createMany: db_MatchCreateManyPhotographerInputEnvelope
  set: db_MatchWhereUniqueInput
  disconnect: db_MatchWhereUniqueInput
  delete: db_MatchWhereUniqueInput
  connect: db_MatchWhereUniqueInput
  update: db_MatchUpdateWithWhereUniqueWithoutPhotographerInput
  updateMany: db_MatchUpdateManyWithWhereWithoutPhotographerInput
  deleteMany: db_MatchScalarWhereInput
}

input db_UserUpdateWithoutCosplayerMatchesInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutCosplayerMatchesInput {
  update: db_UserUpdateWithoutCosplayerMatchesInput!
  create: db_UserCreateWithoutCosplayerMatchesInput!
}

input db_UserUpdateOneRequiredWithoutCosplayerMatchesNestedInput {
  create: db_UserCreateWithoutCosplayerMatchesInput
  connectOrCreate: db_UserCreateOrConnectWithoutCosplayerMatchesInput
  upsert: db_UserUpsertWithoutCosplayerMatchesInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutCosplayerMatchesInput
}

input db_MatchUpdateWithoutScheduleInput {
  id: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  cosplayer: db_UserUpdateOneRequiredWithoutCosplayerMatchesNestedInput
  photographer: db_UserUpdateOneRequiredWithoutPhotographerMatchesNestedInput
  User: db_UserUpdateOneWithoutMatchNestedInput
}

input db_MatchUpsertWithoutScheduleInput {
  update: db_MatchUpdateWithoutScheduleInput!
  create: db_MatchCreateWithoutScheduleInput!
}

input db_MatchUpdateOneRequiredWithoutScheduleNestedInput {
  create: db_MatchCreateWithoutScheduleInput
  connectOrCreate: db_MatchCreateOrConnectWithoutScheduleInput
  upsert: db_MatchUpsertWithoutScheduleInput
  connect: db_MatchWhereUniqueInput
  update: db_MatchUpdateWithoutScheduleInput
}

input db_ScheduleUpdateWithoutUserInput {
  id: db_StringFieldUpdateOperationsInput
  date: db_DateTimeFieldUpdateOperationsInput
  location: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  match: db_MatchUpdateOneRequiredWithoutScheduleNestedInput
}

input db_ScheduleUpsertWithWhereUniqueWithoutUserInput {
  where: db_ScheduleWhereUniqueInput!
  update: db_ScheduleUpdateWithoutUserInput!
  create: db_ScheduleCreateWithoutUserInput!
}

input db_ScheduleUpdateWithWhereUniqueWithoutUserInput {
  where: db_ScheduleWhereUniqueInput!
  data: db_ScheduleUpdateWithoutUserInput!
}

input db_ScheduleUpdateManyWithWhereWithoutUserInput {
  where: db_ScheduleScalarWhereInput!
  data: db_ScheduleUpdateManyMutationInput!
}

input db_ScheduleUpdateManyWithoutUserNestedInput {
  create: db_ScheduleCreateWithoutUserInput
  connectOrCreate: db_ScheduleCreateOrConnectWithoutUserInput
  upsert: db_ScheduleUpsertWithWhereUniqueWithoutUserInput
  createMany: db_ScheduleCreateManyUserInputEnvelope
  set: db_ScheduleWhereUniqueInput
  disconnect: db_ScheduleWhereUniqueInput
  delete: db_ScheduleWhereUniqueInput
  connect: db_ScheduleWhereUniqueInput
  update: db_ScheduleUpdateWithWhereUniqueWithoutUserInput
  updateMany: db_ScheduleUpdateManyWithWhereWithoutUserInput
  deleteMany: db_ScheduleScalarWhereInput
}

input db_UserUpdateWithoutPhotographerMatchesInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutPhotographerMatchesInput {
  update: db_UserUpdateWithoutPhotographerMatchesInput!
  create: db_UserCreateWithoutPhotographerMatchesInput!
}

input db_UserUpdateOneRequiredWithoutPhotographerMatchesNestedInput {
  create: db_UserCreateWithoutPhotographerMatchesInput
  connectOrCreate: db_UserCreateOrConnectWithoutPhotographerMatchesInput
  upsert: db_UserUpsertWithoutPhotographerMatchesInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutPhotographerMatchesInput
}

input db_MatchUpdateWithoutCosplayerInput {
  id: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  photographer: db_UserUpdateOneRequiredWithoutPhotographerMatchesNestedInput
  User: db_UserUpdateOneWithoutMatchNestedInput
  Schedule: db_ScheduleUpdateManyWithoutMatchNestedInput
}

input db_MatchUpsertWithWhereUniqueWithoutCosplayerInput {
  where: db_MatchWhereUniqueInput!
  update: db_MatchUpdateWithoutCosplayerInput!
  create: db_MatchCreateWithoutCosplayerInput!
}

input db_MatchUpdateWithWhereUniqueWithoutCosplayerInput {
  where: db_MatchWhereUniqueInput!
  data: db_MatchUpdateWithoutCosplayerInput!
}

input db_MatchUpdateManyWithWhereWithoutCosplayerInput {
  where: db_MatchScalarWhereInput!
  data: db_MatchUpdateManyMutationInput!
}

input db_MatchUpdateManyWithoutCosplayerNestedInput {
  create: db_MatchCreateWithoutCosplayerInput
  connectOrCreate: db_MatchCreateOrConnectWithoutCosplayerInput
  upsert: db_MatchUpsertWithWhereUniqueWithoutCosplayerInput
  createMany: db_MatchCreateManyCosplayerInputEnvelope
  set: db_MatchWhereUniqueInput
  disconnect: db_MatchWhereUniqueInput
  delete: db_MatchWhereUniqueInput
  connect: db_MatchWhereUniqueInput
  update: db_MatchUpdateWithWhereUniqueWithoutCosplayerInput
  updateMany: db_MatchUpdateManyWithWhereWithoutCosplayerInput
  deleteMany: db_MatchScalarWhereInput
}

input db_UserUpdateWithoutAccountInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutAccountInput {
  update: db_UserUpdateWithoutAccountInput!
  create: db_UserCreateWithoutAccountInput!
}

input db_UserUpdateOneRequiredWithoutAccountNestedInput {
  create: db_UserCreateWithoutAccountInput
  connectOrCreate: db_UserCreateOrConnectWithoutAccountInput
  upsert: db_UserUpsertWithoutAccountInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutAccountInput
}

input db_AccountUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  type: db_StringFieldUpdateOperationsInput
  provider: db_StringFieldUpdateOperationsInput
  providerAccountId: db_StringFieldUpdateOperationsInput
  refresh_token: db_NullableStringFieldUpdateOperationsInput
  access_token: db_NullableStringFieldUpdateOperationsInput
  expires_at: db_NullableIntFieldUpdateOperationsInput
  token_type: db_NullableStringFieldUpdateOperationsInput
  scope: db_NullableStringFieldUpdateOperationsInput
  id_token: db_NullableStringFieldUpdateOperationsInput
  session_state: db_NullableStringFieldUpdateOperationsInput
  user: db_UserUpdateOneRequiredWithoutAccountNestedInput
}

input db_AccountCreateManyInput {
  id: String
  userId: String!
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
}

type db_AffectedRowsOutput {
  count: Int!
  _join: Query!
}

input db_UserCreateWithoutSessionInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutSessionInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutSessionInput!
}

input db_UserCreateNestedOneWithoutSessionInput {
  create: db_UserCreateWithoutSessionInput
  connectOrCreate: db_UserCreateOrConnectWithoutSessionInput
  connect: db_UserWhereUniqueInput
}

input db_SessionCreateInput {
  id: String
  sessionToken: String!
  expires: DateTime!
  user: db_UserCreateNestedOneWithoutSessionInput!
}

input db_UserUpdateWithoutSessionInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutSessionInput {
  update: db_UserUpdateWithoutSessionInput!
  create: db_UserCreateWithoutSessionInput!
}

input db_UserUpdateOneRequiredWithoutSessionNestedInput {
  create: db_UserCreateWithoutSessionInput
  connectOrCreate: db_UserCreateOrConnectWithoutSessionInput
  upsert: db_UserUpsertWithoutSessionInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutSessionInput
}

input db_SessionUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  sessionToken: db_StringFieldUpdateOperationsInput
  expires: db_DateTimeFieldUpdateOperationsInput
  user: db_UserUpdateOneRequiredWithoutSessionNestedInput
}

input db_SessionCreateManyInput {
  id: String
  sessionToken: String!
  userId: String!
  expires: DateTime!
}

input db_VerificationTokenCreateInput {
  identifier: String!
  token: String!
  expires: DateTime!
}

input db_VerificationTokenUpdateInput {
  identifier: db_StringFieldUpdateOperationsInput
  token: db_StringFieldUpdateOperationsInput
  expires: db_DateTimeFieldUpdateOperationsInput
}

input db_VerificationTokenCreateManyInput {
  identifier: String!
  token: String!
  expires: DateTime!
}

input db_VerificationTokenUpdateManyMutationInput {
  identifier: db_StringFieldUpdateOperationsInput
  token: db_StringFieldUpdateOperationsInput
  expires: db_DateTimeFieldUpdateOperationsInput
}

input db_UserCreateInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserCreateManyInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
}

input db_UserUpdateManyMutationInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
}

input db_MatchCreateInput {
  id: String
  createdAt: DateTime
  cosplayer: db_UserCreateNestedOneWithoutCosplayerMatchesInput!
  photographer: db_UserCreateNestedOneWithoutPhotographerMatchesInput!
  User: db_UserCreateNestedOneWithoutMatchInput
  Schedule: db_ScheduleCreateNestedManyWithoutMatchInput
}

input db_MatchUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  cosplayer: db_UserUpdateOneRequiredWithoutCosplayerMatchesNestedInput
  photographer: db_UserUpdateOneRequiredWithoutPhotographerMatchesNestedInput
  User: db_UserUpdateOneWithoutMatchNestedInput
  Schedule: db_ScheduleUpdateManyWithoutMatchNestedInput
}

input db_MatchCreateManyInput {
  id: String
  cosplayerId: String!
  photographerId: String!
  createdAt: DateTime
  userId: String
}

input db_ScheduleCreateInput {
  id: String
  date: DateTime!
  location: String!
  createdAt: DateTime
  match: db_MatchCreateNestedOneWithoutScheduleInput!
  User: db_UserCreateNestedOneWithoutSchedulesInput
}

input db_ScheduleUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  date: db_DateTimeFieldUpdateOperationsInput
  location: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  match: db_MatchUpdateOneRequiredWithoutScheduleNestedInput
  User: db_UserUpdateOneWithoutSchedulesNestedInput
}

input db_ScheduleCreateManyInput {
  id: String
  matchId: String!
  date: DateTime!
  location: String!
  createdAt: DateTime
  userId: String
}

input db_ReviewCreateInput {
  id: String
  rating: Int!
  comment: String
  createdAt: DateTime
  reviewer: db_UserCreateNestedOneWithoutGivenReviewsInput!
  reviewee: db_UserCreateNestedOneWithoutReceivedReviewsInput!
  User: db_UserCreateNestedOneWithoutReviewInput
}

input db_ReviewUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  rating: db_IntFieldUpdateOperationsInput
  comment: db_NullableStringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  reviewer: db_UserUpdateOneRequiredWithoutGivenReviewsNestedInput
  reviewee: db_UserUpdateOneRequiredWithoutReceivedReviewsNestedInput
  User: db_UserUpdateOneWithoutReviewNestedInput
}

input db_ReviewCreateManyInput {
  id: String
  reviewerId: String!
  revieweeId: String!
  rating: Int!
  comment: String
  createdAt: DateTime
  userId: String
}

input db_MessageCreateInput {
  id: String
  content: String!
  createdAt: DateTime
  sender: db_UserCreateNestedOneWithoutSentMessagesInput!
  receiver: db_UserCreateNestedOneWithoutReceivedMessagesInput!
  User: db_UserCreateNestedOneWithoutMessageInput
}

input db_MessageUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  content: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  sender: db_UserUpdateOneRequiredWithoutSentMessagesNestedInput
  receiver: db_UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  User: db_UserUpdateOneWithoutMessageNestedInput
}

input db_MessageCreateManyInput {
  id: String
  senderId: String!
  receiverId: String!
  content: String!
  createdAt: DateTime
  userId: String
}

input db_UserCreateWithoutNotificationsInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutNotificationsInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutNotificationsInput!
}

input db_UserCreateNestedOneWithoutNotificationsInput {
  create: db_UserCreateWithoutNotificationsInput
  connectOrCreate: db_UserCreateOrConnectWithoutNotificationsInput
  connect: db_UserWhereUniqueInput
}

input db_NotificationCreateInput {
  id: String
  content: String!
  type: String!
  createdAt: DateTime
  user: db_UserCreateNestedOneWithoutNotificationsInput!
}

input db_UserUpdateWithoutNotificationsInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutNotificationsInput {
  update: db_UserUpdateWithoutNotificationsInput!
  create: db_UserCreateWithoutNotificationsInput!
}

input db_UserUpdateOneRequiredWithoutNotificationsNestedInput {
  create: db_UserCreateWithoutNotificationsInput
  connectOrCreate: db_UserCreateOrConnectWithoutNotificationsInput
  upsert: db_UserUpsertWithoutNotificationsInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutNotificationsInput
}

input db_NotificationUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  content: db_StringFieldUpdateOperationsInput
  type: db_StringFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  user: db_UserUpdateOneRequiredWithoutNotificationsNestedInput
}

input db_NotificationCreateManyInput {
  id: String
  userId: String!
  content: String!
  type: String!
  createdAt: DateTime
}

input db_UserCreateWithoutInvitationsInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutInvitationsInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutInvitationsInput!
}

input db_UserCreateNestedOneWithoutInvitationsInput {
  create: db_UserCreateWithoutInvitationsInput
  connectOrCreate: db_UserCreateOrConnectWithoutInvitationsInput
  connect: db_UserWhereUniqueInput
}

input db_InvitationCreateInput {
  id: String
  email: String!
  status: db_InviteStatus
  createdAt: DateTime
  invitedPhotographer: db_UserCreateNestedOneWithoutInvitationsInput!
}

input db_UserUpdateWithoutInvitationsInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutInvitationsInput {
  update: db_UserUpdateWithoutInvitationsInput!
  create: db_UserCreateWithoutInvitationsInput!
}

input db_UserUpdateOneRequiredWithoutInvitationsNestedInput {
  create: db_UserCreateWithoutInvitationsInput
  connectOrCreate: db_UserCreateOrConnectWithoutInvitationsInput
  upsert: db_UserUpsertWithoutInvitationsInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutInvitationsInput
}

input db_InvitationUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  status: db_InviteStatus
  createdAt: db_DateTimeFieldUpdateOperationsInput
  invitedPhotographer: db_UserUpdateOneRequiredWithoutInvitationsNestedInput
}

input db_InvitationCreateManyInput {
  id: String
  email: String!
  status: db_InviteStatus
  createdAt: DateTime
  invitedBy: String!
}

input db_UserCreateWithoutTodoInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Post: db_PostCreateNestedManyWithoutAuthorInput
}

input db_UserCreateOrConnectWithoutTodoInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutTodoInput!
}

input db_UserCreateNestedOneWithoutTodoInput {
  create: db_UserCreateWithoutTodoInput
  connectOrCreate: db_UserCreateOrConnectWithoutTodoInput
  connect: db_UserWhereUniqueInput
}

input db_TodoCreateInput {
  id: String
  text: String!
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  user: db_UserCreateNestedOneWithoutTodoInput!
}

input db_UserUpdateWithoutTodoInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Post: db_PostUpdateManyWithoutAuthorNestedInput
}

input db_UserUpsertWithoutTodoInput {
  update: db_UserUpdateWithoutTodoInput!
  create: db_UserCreateWithoutTodoInput!
}

input db_UserUpdateOneRequiredWithoutTodoNestedInput {
  create: db_UserCreateWithoutTodoInput
  connectOrCreate: db_UserCreateOrConnectWithoutTodoInput
  upsert: db_UserUpsertWithoutTodoInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutTodoInput
}

input db_TodoUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  text: db_StringFieldUpdateOperationsInput
  isCompleted: db_BoolFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  user: db_UserUpdateOneRequiredWithoutTodoNestedInput
}

input db_TodoCreateManyInput {
  id: String
  text: String!
  isCompleted: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  userId: String!
}

input db_UserCreateWithoutPostInput {
  id: String
  name: String
  email: String!
  emailVerified: DateTime
  image: String
  role: db_UserRole
  interests: String
  specialization: String
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: DateTime
  updatedAt: DateTime
  stripeCustomerId: String
  stripeSubscriptionId: String
  stripePriceId: String
  stripeCurrentPeriodEnd: DateTime
  cosplayerMatches: db_MatchCreateNestedManyWithoutCosplayerInput
  photographerMatches: db_MatchCreateNestedManyWithoutPhotographerInput
  schedules: db_ScheduleCreateNestedManyWithoutUserInput
  givenReviews: db_ReviewCreateNestedManyWithoutReviewerInput
  receivedReviews: db_ReviewCreateNestedManyWithoutRevieweeInput
  sentMessages: db_MessageCreateNestedManyWithoutSenderInput
  receivedMessages: db_MessageCreateNestedManyWithoutReceiverInput
  notifications: db_NotificationCreateNestedManyWithoutUserInput
  invitations: db_InvitationCreateNestedManyWithoutInvitedPhotographerInput
  Match: db_MatchCreateNestedManyWithoutUserInput
  Review: db_ReviewCreateNestedManyWithoutUserInput
  Message: db_MessageCreateNestedManyWithoutUserInput
  Account: db_AccountCreateNestedManyWithoutUserInput
  Session: db_SessionCreateNestedManyWithoutUserInput
  Todo: db_TodoCreateNestedManyWithoutUserInput
}

input db_UserCreateOrConnectWithoutPostInput {
  where: db_UserWhereUniqueInput!
  create: db_UserCreateWithoutPostInput!
}

input db_UserCreateNestedOneWithoutPostInput {
  create: db_UserCreateWithoutPostInput
  connectOrCreate: db_UserCreateOrConnectWithoutPostInput
  connect: db_UserWhereUniqueInput
}

input db_PostCreateInput {
  id: String
  title: String!
  content: db_NullableJsonNullValueInput
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  author: db_UserCreateNestedOneWithoutPostInput!
}

input db_UserUpdateWithoutPostInput {
  id: db_StringFieldUpdateOperationsInput
  name: db_NullableStringFieldUpdateOperationsInput
  email: db_StringFieldUpdateOperationsInput
  emailVerified: db_NullableDateTimeFieldUpdateOperationsInput
  image: db_NullableStringFieldUpdateOperationsInput
  role: db_UserRole
  interests: db_NullableStringFieldUpdateOperationsInput
  specialization: db_NullableStringFieldUpdateOperationsInput
  portfolio: db_NullableJsonNullValueInput
  availability: db_NullableJsonNullValueInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  stripeCustomerId: db_NullableStringFieldUpdateOperationsInput
  stripeSubscriptionId: db_NullableStringFieldUpdateOperationsInput
  stripePriceId: db_NullableStringFieldUpdateOperationsInput
  stripeCurrentPeriodEnd: db_NullableDateTimeFieldUpdateOperationsInput
  cosplayerMatches: db_MatchUpdateManyWithoutCosplayerNestedInput
  photographerMatches: db_MatchUpdateManyWithoutPhotographerNestedInput
  schedules: db_ScheduleUpdateManyWithoutUserNestedInput
  givenReviews: db_ReviewUpdateManyWithoutReviewerNestedInput
  receivedReviews: db_ReviewUpdateManyWithoutRevieweeNestedInput
  sentMessages: db_MessageUpdateManyWithoutSenderNestedInput
  receivedMessages: db_MessageUpdateManyWithoutReceiverNestedInput
  notifications: db_NotificationUpdateManyWithoutUserNestedInput
  invitations: db_InvitationUpdateManyWithoutInvitedPhotographerNestedInput
  Match: db_MatchUpdateManyWithoutUserNestedInput
  Review: db_ReviewUpdateManyWithoutUserNestedInput
  Message: db_MessageUpdateManyWithoutUserNestedInput
  Account: db_AccountUpdateManyWithoutUserNestedInput
  Session: db_SessionUpdateManyWithoutUserNestedInput
  Todo: db_TodoUpdateManyWithoutUserNestedInput
}

input db_UserUpsertWithoutPostInput {
  update: db_UserUpdateWithoutPostInput!
  create: db_UserCreateWithoutPostInput!
}

input db_UserUpdateOneRequiredWithoutPostNestedInput {
  create: db_UserCreateWithoutPostInput
  connectOrCreate: db_UserCreateOrConnectWithoutPostInput
  upsert: db_UserUpsertWithoutPostInput
  connect: db_UserWhereUniqueInput
  update: db_UserUpdateWithoutPostInput
}

input db_PostUpdateInput {
  id: db_StringFieldUpdateOperationsInput
  title: db_StringFieldUpdateOperationsInput
  content: db_NullableJsonNullValueInput
  published: db_BoolFieldUpdateOperationsInput
  createdAt: db_DateTimeFieldUpdateOperationsInput
  updatedAt: db_DateTimeFieldUpdateOperationsInput
  author: db_UserUpdateOneRequiredWithoutPostNestedInput
}

input db_PostCreateManyInput {
  id: String
  title: String!
  content: db_NullableJsonNullValueInput
  published: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  authorId: String!
}

type Mutation {
  db_createOneAccount(data: db_AccountCreateInput!): db_Account
  db_upsertOneAccount(where: db_AccountWhereUniqueInput!, create: db_AccountCreateInput!, update: db_AccountUpdateInput!): db_Account
  db_createManyAccount(data: [db_AccountCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneAccount(where: db_AccountWhereUniqueInput!): db_Account
  db_updateOneAccount(data: db_AccountUpdateInput!, where: db_AccountWhereUniqueInput!): db_Account
  db_updateManyAccount(data: db_AccountUpdateManyMutationInput!, where: db_AccountWhereInput): db_AffectedRowsOutput
  db_deleteManyAccount(where: db_AccountWhereInput): db_AffectedRowsOutput
  db_createOneSession(data: db_SessionCreateInput!): db_Session
  db_upsertOneSession(where: db_SessionWhereUniqueInput!, create: db_SessionCreateInput!, update: db_SessionUpdateInput!): db_Session
  db_createManySession(data: [db_SessionCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneSession(where: db_SessionWhereUniqueInput!): db_Session
  db_updateOneSession(data: db_SessionUpdateInput!, where: db_SessionWhereUniqueInput!): db_Session
  db_updateManySession(data: db_SessionUpdateManyMutationInput!, where: db_SessionWhereInput): db_AffectedRowsOutput
  db_deleteManySession(where: db_SessionWhereInput): db_AffectedRowsOutput
  db_createOneVerificationToken(data: db_VerificationTokenCreateInput!): db_VerificationToken
  db_upsertOneVerificationToken(where: db_VerificationTokenWhereUniqueInput!, create: db_VerificationTokenCreateInput!, update: db_VerificationTokenUpdateInput!): db_VerificationToken
  db_createManyVerificationToken(data: [db_VerificationTokenCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneVerificationToken(where: db_VerificationTokenWhereUniqueInput!): db_VerificationToken
  db_updateOneVerificationToken(data: db_VerificationTokenUpdateInput!, where: db_VerificationTokenWhereUniqueInput!): db_VerificationToken
  db_updateManyVerificationToken(data: db_VerificationTokenUpdateManyMutationInput!, where: db_VerificationTokenWhereInput): db_AffectedRowsOutput
  db_deleteManyVerificationToken(where: db_VerificationTokenWhereInput): db_AffectedRowsOutput
  db_createOneUser(data: db_UserCreateInput!): db_User
  db_upsertOneUser(where: db_UserWhereUniqueInput!, create: db_UserCreateInput!, update: db_UserUpdateInput!): db_User
  db_createManyUser(data: [db_UserCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneUser(where: db_UserWhereUniqueInput!): db_User
  db_updateOneUser(data: db_UserUpdateInput!, where: db_UserWhereUniqueInput!): db_User
  db_updateManyUser(data: db_UserUpdateManyMutationInput!, where: db_UserWhereInput): db_AffectedRowsOutput
  db_deleteManyUser(where: db_UserWhereInput): db_AffectedRowsOutput
  db_createOneMatch(data: db_MatchCreateInput!): db_Match
  db_upsertOneMatch(where: db_MatchWhereUniqueInput!, create: db_MatchCreateInput!, update: db_MatchUpdateInput!): db_Match
  db_createManyMatch(data: [db_MatchCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneMatch(where: db_MatchWhereUniqueInput!): db_Match
  db_updateOneMatch(data: db_MatchUpdateInput!, where: db_MatchWhereUniqueInput!): db_Match
  db_updateManyMatch(data: db_MatchUpdateManyMutationInput!, where: db_MatchWhereInput): db_AffectedRowsOutput
  db_deleteManyMatch(where: db_MatchWhereInput): db_AffectedRowsOutput
  db_createOneSchedule(data: db_ScheduleCreateInput!): db_Schedule
  db_upsertOneSchedule(where: db_ScheduleWhereUniqueInput!, create: db_ScheduleCreateInput!, update: db_ScheduleUpdateInput!): db_Schedule
  db_createManySchedule(data: [db_ScheduleCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneSchedule(where: db_ScheduleWhereUniqueInput!): db_Schedule
  db_updateOneSchedule(data: db_ScheduleUpdateInput!, where: db_ScheduleWhereUniqueInput!): db_Schedule
  db_updateManySchedule(data: db_ScheduleUpdateManyMutationInput!, where: db_ScheduleWhereInput): db_AffectedRowsOutput
  db_deleteManySchedule(where: db_ScheduleWhereInput): db_AffectedRowsOutput
  db_createOneReview(data: db_ReviewCreateInput!): db_Review
  db_upsertOneReview(where: db_ReviewWhereUniqueInput!, create: db_ReviewCreateInput!, update: db_ReviewUpdateInput!): db_Review
  db_createManyReview(data: [db_ReviewCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneReview(where: db_ReviewWhereUniqueInput!): db_Review
  db_updateOneReview(data: db_ReviewUpdateInput!, where: db_ReviewWhereUniqueInput!): db_Review
  db_updateManyReview(data: db_ReviewUpdateManyMutationInput!, where: db_ReviewWhereInput): db_AffectedRowsOutput
  db_deleteManyReview(where: db_ReviewWhereInput): db_AffectedRowsOutput
  db_createOneMessage(data: db_MessageCreateInput!): db_Message
  db_upsertOneMessage(where: db_MessageWhereUniqueInput!, create: db_MessageCreateInput!, update: db_MessageUpdateInput!): db_Message
  db_createManyMessage(data: [db_MessageCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneMessage(where: db_MessageWhereUniqueInput!): db_Message
  db_updateOneMessage(data: db_MessageUpdateInput!, where: db_MessageWhereUniqueInput!): db_Message
  db_updateManyMessage(data: db_MessageUpdateManyMutationInput!, where: db_MessageWhereInput): db_AffectedRowsOutput
  db_deleteManyMessage(where: db_MessageWhereInput): db_AffectedRowsOutput
  db_createOneNotification(data: db_NotificationCreateInput!): db_Notification
  db_upsertOneNotification(where: db_NotificationWhereUniqueInput!, create: db_NotificationCreateInput!, update: db_NotificationUpdateInput!): db_Notification
  db_createManyNotification(data: [db_NotificationCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneNotification(where: db_NotificationWhereUniqueInput!): db_Notification
  db_updateOneNotification(data: db_NotificationUpdateInput!, where: db_NotificationWhereUniqueInput!): db_Notification
  db_updateManyNotification(data: db_NotificationUpdateManyMutationInput!, where: db_NotificationWhereInput): db_AffectedRowsOutput
  db_deleteManyNotification(where: db_NotificationWhereInput): db_AffectedRowsOutput
  db_createOneInvitation(data: db_InvitationCreateInput!): db_Invitation
  db_upsertOneInvitation(where: db_InvitationWhereUniqueInput!, create: db_InvitationCreateInput!, update: db_InvitationUpdateInput!): db_Invitation
  db_createManyInvitation(data: [db_InvitationCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneInvitation(where: db_InvitationWhereUniqueInput!): db_Invitation
  db_updateOneInvitation(data: db_InvitationUpdateInput!, where: db_InvitationWhereUniqueInput!): db_Invitation
  db_updateManyInvitation(data: db_InvitationUpdateManyMutationInput!, where: db_InvitationWhereInput): db_AffectedRowsOutput
  db_deleteManyInvitation(where: db_InvitationWhereInput): db_AffectedRowsOutput
  db_createOneTodo(data: db_TodoCreateInput!): db_Todo
  db_upsertOneTodo(where: db_TodoWhereUniqueInput!, create: db_TodoCreateInput!, update: db_TodoUpdateInput!): db_Todo
  db_createManyTodo(data: [db_TodoCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOneTodo(where: db_TodoWhereUniqueInput!): db_Todo
  db_updateOneTodo(data: db_TodoUpdateInput!, where: db_TodoWhereUniqueInput!): db_Todo
  db_updateManyTodo(data: db_TodoUpdateManyMutationInput!, where: db_TodoWhereInput): db_AffectedRowsOutput
  db_deleteManyTodo(where: db_TodoWhereInput): db_AffectedRowsOutput
  db_createOnePost(data: db_PostCreateInput!): db_Post
  db_upsertOnePost(where: db_PostWhereUniqueInput!, create: db_PostCreateInput!, update: db_PostUpdateInput!): db_Post
  db_createManyPost(data: [db_PostCreateManyInput]!, skipDuplicates: Boolean): db_AffectedRowsOutput
  db_deleteOnePost(where: db_PostWhereUniqueInput!): db_Post
  db_updateOnePost(data: db_PostUpdateInput!, where: db_PostWhereUniqueInput!): db_Post
  db_updateManyPost(data: db_PostUpdateManyMutationInput!, where: db_PostWhereInput): db_AffectedRowsOutput
  db_deleteManyPost(where: db_PostWhereInput): db_AffectedRowsOutput
  db_executeRaw(query: String!, parameters: [String]): Int!
}

scalar DateTime

scalar JSON

scalar UUID

scalar BigInt

scalar db_Bytes

type _Row {
  ID: ID!
  Int: Int!
  Float: Float!
  String: String!
  Boolean: Boolean!
  DateTime: DateTime!
  JSON: JSON!
  Object: _Row!
  Array: [_Row!]!
  OptionalID: ID
  OptionalInt: Int
  OptionalFloat: Float
  OptionalString: String
  OptionalBoolean: Boolean
  OptionalDateTime: DateTime
  OptionalJSON: JSON
  OptionalObject: _Row
  OptionalArray: [_Row!]
  _join: Query!
}

enum weather_CacheControlScope {
  PRIVATE
  PUBLIC
}

type weather_City {
  coord: weather_Coordinates
  country: String
  id: ID
  name: String
  weather: weather_Weather
  _join: Query!
}

type weather_Clouds {
  all: Int
  humidity: Int
  visibility: Int
  _join: Query!
}

input weather_ConfigInput {
  lang: weather_Language
  units: weather_Unit
}

type weather_Coordinates {
  lat: Float
  lon: Float
  _join: Query!
}

enum weather_Language {
  af
  al
  ar
  az
  bg
  ca
  cz
  da
  de
  el
  en
  es
  eu
  fa
  fi
  fr
  gl
  he
  hi
  hr
  hu
  id
  it
  ja
  kr
  la
  lt
  mk
  nl
  no
  pl
  pt
  pt_br
  ro
  ru
  se
  sk
  sl
  sp
  sr
  sv
  th
  tr
  ua
  uk
  vi
  zh_cn
  zh_tw
  zu
}

type weather_Summary {
  description: String
  icon: String
  title: String
  _join: Query!
}

type weather_Temperature {
  actual: Float
  feelsLike: Float
  max: Float
  min: Float
  _join: Query!
}

enum weather_Unit {
  imperial
  kelvin
  metric
}

"""The `Upload` scalar type represents a file upload."""
scalar weather_Upload

type weather_Weather {
  clouds: weather_Clouds
  summary: weather_Summary
  temperature: weather_Temperature
  timestamp: Int
  wind: weather_Wind
  _join: Query!
}

type weather_Wind {
  deg: Int
  speed: Float
  _join: Query!
}

enum COMMON_REGEX_PATTERN {
  EMAIL
  DOMAIN
}

enum WG_ROLE {
  admin
  user
}

"""Well known claims - https://www.iana.org/assignments/jwt/jwt.xhtml"""
enum WG_CLAIM {
  """iss"""
  ISSUER
  """deprecated alias for ISSUER"""
  PROVIDER
  """sub"""
  SUBJECT
  """alias for sub"""
  USERID
  """name"""
  NAME
  """given_name"""
  GIVEN_NAME
  """family_name"""
  FAMILY_NAME
  """middle_name"""
  MIDDLE_NAME
  """nickname"""
  NICKNAME
  """preferred_username"""
  PREFERRED_USERNAME
  """profile"""
  PROFILE
  """picture"""
  PICTURE
  """website"""
  WEBSITE
  """email"""
  EMAIL
  """email_verified"""
  EMAIL_VERIFIED
  """gender"""
  GENDER
  """birthdate"""
  BIRTH_DATE
  """zoneinfo"""
  ZONE_INFO
  """locale"""
  LOCALE
  """location"""
  LOCATION
}

enum WunderGraphDateTimeFormat {
  "2006-01-02T15:04:05-0700"
  ISO8601
  "Mon Jan _2 15:04:05 2006"
  ANSIC
  "Mon Jan _2 15:04:05 MST 2006"
  UnixDate
  "Mon Jan 02 15:04:05 -0700 2006"
  RubyDate
  "02 Jan 06 15:04 MST"
  RFC822
  "02 Jan 06 15:04 -0700"
  RFC822Z
  "Monday, 02-Jan-06 15:04:05 MST"
  RFC850
  "Mon, 02 Jan 2006 15:04:05 MST"
  RFC1123
  "Mon, 02 Jan 2006 15:04:05 -0700"
  RFC1123Z
  "2006-01-02T15:04:05Z07:00"
  RFC3339
  "2006-01-02T15:04:05.999999999Z07:00"
  RFC3339Nano
  "3:04PM"
  Kitchen
  "Jan _2 15:04:05"
  Stamp
  "Jan _2 15:04:05.000"
  StampMilli
  "Jan _2 15:04:05.000000"
  StampMicro
  "Jan _2 15:04:05.000000000"
  StampNano
}