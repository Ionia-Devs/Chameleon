{
  "version": 3,
  "sources": ["../../../../operations/openai/summarize-url-content.ts", "../../../wundergraph.factory.ts"],
  "sourcesContent": ["import { createOperation, z } from '../../generated/wundergraph.factory';\n\nexport default createOperation.query({\n  input: z.object({\n    url: z.string(),\n  }),\n  response: z.object({\n    summary: z.string(),\n  }),\n  description: 'Summarize the content of a URL',\n  handler: async ({ operations, input, log, openAI }) => {\n    const agent = openAI.createAgent({\n      model: 'gpt-3.5-turbo-16k-0613',\n      functions: [\n        {\n          name: 'openai/load-url',\n          pagination: {\n            pageSize: 1024 * 15,\n            maxPages: 2,\n          },\n        },\n      ],\n      structuredOutputSchema: z.object({\n        summary: z.string(),\n      }),\n    });\n    const out = await agent.execWithPrompt({\n      prompt: `Load the content of the URL: ${input.url}\n\t\t\tSummarize the content of the website.\n\t\t\t`,\n      outPrompt:\n        'Do a summary of all the results and return it as a single string in the out function',\n      debug: true,\n    });\n    return {\n      summary: out.structuredOutput.summary,\n    };\n  },\n});\n", "// Code generated by wunderctl. DO NOT EDIT.\n\nimport type { InternalClient } from \"./wundergraph.internal.client\";\nimport type { InternalOperationsClient } from \"./wundergraph.internal.operations.client\";\nimport type { ORM } from './orm'\nimport type { Role } from \"./wundergraph.server\";\nimport type { CustomClaims } from \"./claims\";\nimport { createOperationFactory } from \"@wundergraph/sdk/operations\";\n\n\nimport type server from '../wundergraph.server';\n\ntype ContextField = Required<Required<Required<typeof server>['context']>['request']>['create'];\nexport type ContextType = ContextField extends (...args: any) => any ? Awaited<ReturnType<ContextField>> : never;\n\n\n\nimport type { Queries, Mutations } from \"./jsonschema\";\nimport type { IOpenaiAgentFactory } from \"@wundergraph/sdk/openai\"\nexport type QueriesAndMutations = Queries & Mutations;\nexport type OpenApiAgentFactory = IOpenaiAgentFactory<QueriesAndMutations>;\n\nexport { z, AuthorizationError } from \"@wundergraph/sdk/operations\";\nexport const createOperation = createOperationFactory<InternalClient, Role, CustomClaims, InternalOperationsClient, ORM, OpenApiAgentFactory, ContextType>();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOA,wBAAuC;AAevC,IAAAA,qBAAsC;AAC/B,IAAM,sBAAkB,0CAA4H;;;ADrB3J,IAAO,gCAAQ,gBAAgB,MAAM;AAAA,EACnC,OAAO,qBAAE,OAAO;AAAA,IACd,KAAK,qBAAE,OAAO;AAAA,EAChB,CAAC;AAAA,EACD,UAAU,qBAAE,OAAO;AAAA,IACjB,SAAS,qBAAE,OAAO;AAAA,EACpB,CAAC;AAAA,EACD,aAAa;AAAA,EACb,SAAS,OAAO,EAAE,YAAY,OAAO,KAAK,OAAO,MAAM;AACrD,UAAM,QAAQ,OAAO,YAAY;AAAA,MAC/B,OAAO;AAAA,MACP,WAAW;AAAA,QACT;AAAA,UACE,MAAM;AAAA,UACN,YAAY;AAAA,YACV,UAAU,OAAO;AAAA,YACjB,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,MACA,wBAAwB,qBAAE,OAAO;AAAA,QAC/B,SAAS,qBAAE,OAAO;AAAA,MACpB,CAAC;AAAA,IACH,CAAC;AACD,UAAM,MAAM,MAAM,MAAM,eAAe;AAAA,MACrC,QAAQ,gCAAgC,MAAM;AAAA;AAAA;AAAA,MAG9C,WACE;AAAA,MACF,OAAO;AAAA,IACT,CAAC;AACD,WAAO;AAAA,MACL,SAAS,IAAI,iBAAiB;AAAA,IAChC;AAAA,EACF;AACF,CAAC;",
  "names": ["import_operations"]
}
