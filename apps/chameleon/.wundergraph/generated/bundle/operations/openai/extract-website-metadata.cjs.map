{
  "version": 3,
  "sources": ["../../../../operations/openai/extract-website-metadata.ts", "../../../wundergraph.factory.ts"],
  "sourcesContent": ["import {\n  OpenApiAgentFactory,\n  createOperation,\n  z,\n} from '../../generated/wundergraph.factory';\n\nexport default createOperation.query({\n  input: z.object({\n    url: z.string(),\n  }),\n  description:\n    'Load metadata like title, description, social media images, headlines, and summary from a website',\n  handler: async ({ operations, input, openAI }) => {\n    const metaData = await getMetaData(openAI, input.url);\n    const links = await getLinks(openAI, input.url);\n    return {\n      links,\n      ...metaData,\n    };\n  },\n});\n\nconst getMetaData = async (openAI: OpenApiAgentFactory, url: string) => {\n  const agent = openAI.createAgent({\n    model: 'gpt-3.5-turbo-16k-0613',\n    functions: [\n      {\n        name: 'openai/load-url',\n        pagination: {\n          pageSize: 1024 * 15,\n          maxPages: 1,\n        },\n      },\n      {\n        name: 'openai/summarize-url-content',\n      },\n    ],\n    structuredOutputSchema: z.object({\n      title: z.string(),\n      description: z.string(),\n      h1: z.string(),\n      summary: z.string(),\n    }),\n  });\n  const out = await agent.execWithPrompt({\n    prompt: `Load the content of the URL: ${url}\n\t\tYou're a HTML parser. Your job is to extract the title, description and h1 from the HTML.\n\t\tDo not include the HTML tags in the result.\n\t\tDon't change the content, just extract the information.\n\t\t\n\t\tOnce this is done, add a summary of the website.\n\t\t`,\n    outPrompt: 'Set the result to the out function in a structured way',\n    debug: true,\n  });\n  return out.structuredOutput;\n};\n\nconst getLinks = async (openAI: OpenApiAgentFactory, url: string) => {\n  const agent = openAI.createAgent({\n    model: 'gpt-3.5-turbo-16k-0613',\n    functions: [\n      {\n        name: 'openai/load-url',\n        pagination: {\n          pageSize: 1024 * 15,\n          maxPages: 3,\n        },\n      },\n    ],\n    structuredOutputSchema: z.object({\n      links: z.array(z.string()),\n    }),\n  });\n  const out = await agent.execWithPrompt({\n    prompt: `Load the content of the URL: ${url}\n\t\tYou're a HTML parser. Your job is to extract links from the HTML.\n\t\tDo not include the HTML tags in the result.\n\t\tDon't change the content, just extract the links.\n\t\tExclude links that are not visible or meaningful to the user,\n\t\tlike links to images, scripts, js, stylesheets, fonts, etc.\n\t\t`,\n    outPrompt: 'Set the result to the out function in a structured way',\n    debug: true,\n  });\n  return out.structuredOutput.links;\n};\n", "// Code generated by wunderctl. DO NOT EDIT.\n\nimport type { InternalClient } from \"./wundergraph.internal.client\";\nimport type { InternalOperationsClient } from \"./wundergraph.internal.operations.client\";\nimport type { ORM } from './orm'\nimport type { Role } from \"./wundergraph.server\";\nimport type { CustomClaims } from \"./claims\";\nimport { createOperationFactory } from \"@wundergraph/sdk/operations\";\n\n\nimport type server from '../wundergraph.server';\n\ntype ContextField = Required<Required<Required<typeof server>['context']>['request']>['create'];\nexport type ContextType = ContextField extends (...args: any) => any ? Awaited<ReturnType<ContextField>> : never;\n\n\n\nimport type { Queries, Mutations } from \"./jsonschema\";\nimport type { IOpenaiAgentFactory } from \"@wundergraph/sdk/openai\"\nexport type QueriesAndMutations = Queries & Mutations;\nexport type OpenApiAgentFactory = IOpenaiAgentFactory<QueriesAndMutations>;\n\nexport { z, AuthorizationError } from \"@wundergraph/sdk/operations\";\nexport const createOperation = createOperationFactory<InternalClient, Role, CustomClaims, InternalOperationsClient, ORM, OpenApiAgentFactory, ContextType>();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOA,wBAAuC;AAevC,IAAAA,qBAAsC;AAC/B,IAAM,sBAAkB,0CAA4H;;;ADjB3J,IAAO,mCAAQ,gBAAgB,MAAM;AAAA,EACnC,OAAO,qBAAE,OAAO;AAAA,IACd,KAAK,qBAAE,OAAO;AAAA,EAChB,CAAC;AAAA,EACD,aACE;AAAA,EACF,SAAS,OAAO,EAAE,YAAY,OAAO,OAAO,MAAM;AAChD,UAAM,WAAW,MAAM,YAAY,QAAQ,MAAM,GAAG;AACpD,UAAM,QAAQ,MAAM,SAAS,QAAQ,MAAM,GAAG;AAC9C,WAAO;AAAA,MACL;AAAA,MACA,GAAG;AAAA,IACL;AAAA,EACF;AACF,CAAC;AAED,IAAM,cAAc,OAAO,QAA6B,QAAgB;AACtE,QAAM,QAAQ,OAAO,YAAY;AAAA,IAC/B,OAAO;AAAA,IACP,WAAW;AAAA,MACT;AAAA,QACE,MAAM;AAAA,QACN,YAAY;AAAA,UACV,UAAU,OAAO;AAAA,UACjB,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,MACR;AAAA,IACF;AAAA,IACA,wBAAwB,qBAAE,OAAO;AAAA,MAC/B,OAAO,qBAAE,OAAO;AAAA,MAChB,aAAa,qBAAE,OAAO;AAAA,MACtB,IAAI,qBAAE,OAAO;AAAA,MACb,SAAS,qBAAE,OAAO;AAAA,IACpB,CAAC;AAAA,EACH,CAAC;AACD,QAAM,MAAM,MAAM,MAAM,eAAe;AAAA,IACrC,QAAQ,gCAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOxC,WAAW;AAAA,IACX,OAAO;AAAA,EACT,CAAC;AACD,SAAO,IAAI;AACb;AAEA,IAAM,WAAW,OAAO,QAA6B,QAAgB;AACnE,QAAM,QAAQ,OAAO,YAAY;AAAA,IAC/B,OAAO;AAAA,IACP,WAAW;AAAA,MACT;AAAA,QACE,MAAM;AAAA,QACN,YAAY;AAAA,UACV,UAAU,OAAO;AAAA,UACjB,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAAA,IACA,wBAAwB,qBAAE,OAAO;AAAA,MAC/B,OAAO,qBAAE,MAAM,qBAAE,OAAO,CAAC;AAAA,IAC3B,CAAC;AAAA,EACH,CAAC;AACD,QAAM,MAAM,MAAM,MAAM,eAAe;AAAA,IACrC,QAAQ,gCAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOxC,WAAW;AAAA,IACX,OAAO;AAAA,EACT,CAAC;AACD,SAAO,IAAI,iBAAiB;AAC9B;",
  "names": ["import_operations"]
}
