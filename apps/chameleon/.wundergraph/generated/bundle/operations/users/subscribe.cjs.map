{
  "version": 3,
  "sources": ["../../../../operations/users/subscribe.ts", "../../../wundergraph.factory.ts"],
  "sourcesContent": ["import { createOperation, z } from '../../generated/wundergraph.factory';\n\nexport default createOperation.subscription({\n  input: z.object({\n    id: z.string(),\n  }),\n  handler: async function* ({ input }) {\n    try {\n      // setup your subscription here, e.g. connect to a queue / stream\n      for (let i = 0; i < 10; i++) {\n        yield {\n          id: input.id,\n          name: 'Jens',\n          bio: 'Founder of WunderGraph',\n          time: new Date().toISOString(),\n        };\n        // let's fake some delay\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    } finally {\n      // finally gets called, when the client disconnects\n      // you can use it to clean up the queue / stream connection\n      console.log('client disconnected');\n    }\n  },\n});\n", "// Code generated by wunderctl. DO NOT EDIT.\n\nimport type { InternalOperationsClient } from \"./wundergraph.internal.operations.client\";\nimport type { ORM } from './orm'\nimport type { Role } from \"./wundergraph.server\";\nimport type { CustomClaims } from \"./claims\";\nimport { createOperationFactory } from \"@wundergraph/sdk/operations\";\n\n\nimport type server from '../wundergraph.server';\n\ntype ContextField = Required<Required<Required<typeof server>['context']>['request']>['create'];\nexport type ContextType = ContextField extends (...args: any) => any ? Awaited<ReturnType<ContextField>> : never;\n\n\n\nimport type { Queries, Mutations } from \"./jsonschema\";\nimport type { IOpenaiAgentFactory } from \"@wundergraph/sdk/openai\"\nexport type QueriesAndMutations = Queries & Mutations;\nexport type OpenApiAgentFactory = IOpenaiAgentFactory<QueriesAndMutations>;\n\nexport { z, AuthorizationError } from \"@wundergraph/sdk/operations\";\nexport const createOperation = createOperationFactory<Role, CustomClaims, InternalOperationsClient, ORM, OpenApiAgentFactory, ContextType>();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACMA,wBAAuC;AAevC,IAAAA,qBAAsC;AAC/B,IAAM,sBAAkB,0CAA4G;;;ADpB3I,IAAO,oBAAQ,gBAAgB,aAAa;AAAA,EAC1C,OAAO,qBAAE,OAAO;AAAA,IACd,IAAI,qBAAE,OAAO;AAAA,EACf,CAAC;AAAA,EACD,SAAS,iBAAiB,EAAE,MAAM,GAAG;AACnC,QAAI;AAEF,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,cAAM;AAAA,UACJ,IAAI,MAAM;AAAA,UACV,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM,IAAI,KAAK,EAAE,YAAY;AAAA,QAC/B;AAEA,cAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AAAA,MAC1D;AAAA,IACF,UAAE;AAGA,cAAQ,IAAI,qBAAqB;AAAA,IACnC;AAAA,EACF;AACF,CAAC;",
  "names": ["import_operations"]
}
