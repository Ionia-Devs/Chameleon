{
  "version": 3,
  "sources": ["../../../../operations/users/get.ts", "../../../wundergraph.factory.ts"],
  "sourcesContent": ["import { createOperation, z } from '../../generated/wundergraph.factory';\n\nexport default createOperation.query({\n  input: z.object({\n    id: z.string(),\n  }),\n  handler: async ({ input, context }) => {\n    context.greet();\n    return {\n      id: input.id,\n      name: 'Jens',\n      bio: 'Founder of WunderGraph',\n    };\n  },\n});\n", "// Code generated by wunderctl. DO NOT EDIT.\n\nimport type { InternalOperationsClient } from \"./wundergraph.internal.operations.client\";\nimport type { ORM } from './orm'\nimport type { Role } from \"./wundergraph.server\";\nimport type { CustomClaims } from \"./claims\";\nimport { createOperationFactory } from \"@wundergraph/sdk/operations\";\n\n\nimport type server from '../wundergraph.server';\n\ntype ContextField = Required<Required<Required<typeof server>['context']>['request']>['create'];\nexport type ContextType = ContextField extends (...args: any) => any ? Awaited<ReturnType<ContextField>> : never;\n\n\n\nimport type { Queries, Mutations } from \"./jsonschema\";\nimport type { IOpenaiAgentFactory } from \"@wundergraph/sdk/openai\"\nexport type QueriesAndMutations = Queries & Mutations;\nexport type OpenApiAgentFactory = IOpenaiAgentFactory<QueriesAndMutations>;\n\nexport { z, AuthorizationError } from \"@wundergraph/sdk/operations\";\nexport const createOperation = createOperationFactory<Role, CustomClaims, InternalOperationsClient, ORM, OpenApiAgentFactory, ContextType>();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACMA,wBAAuC;AAevC,IAAAA,qBAAsC;AAC/B,IAAM,sBAAkB,0CAA4G;;;ADpB3I,IAAO,cAAQ,gBAAgB,MAAM;AAAA,EACnC,OAAO,qBAAE,OAAO;AAAA,IACd,IAAI,qBAAE,OAAO;AAAA,EACf,CAAC;AAAA,EACD,SAAS,OAAO,EAAE,OAAO,QAAQ,MAAM;AACrC,YAAQ,MAAM;AACd,WAAO;AAAA,MACL,IAAI,MAAM;AAAA,MACV,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,EACF;AACF,CAAC;",
  "names": ["import_operations"]
}
