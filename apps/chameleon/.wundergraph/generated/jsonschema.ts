// Code generated by wunderctl. DO NOT EDIT.

// @ts-ignore: no-types available
import type { JSONSchema7 } from "json-schema";

// @ts-ignore: module unavailable
declare module "json-schema" {
	export interface JSONSchema7 {
		"x-graphql-enum-name"?: string;
	}
}

export interface Queries {
	"countries/CountryByCode": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"todos/getAllTodosForCurrentUser": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"openai/extract-website-metadata": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"openai/load-url": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"openai/summarize-url-content": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"openai/summary": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"openai/weather": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"users/get": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
}

export interface Mutations {
	"todos/addTodo": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"todos/updateTodo": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
	"users/update": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
}

export interface Subscriptions {
	"users/subscribe": {
		input: JSONSchema7;
		response: JSONSchema7;
		operationType: string;
		description: string;
	};
}

export type Schema = Queries & Mutations & Subscriptions;

const jsonSchema: Schema = {
	"countries/CountryByCode": {
		input: {
			type: "object",
			properties: { code: { type: "string" } },
			additionalProperties: false,
			required: ["code"],
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						countries_country: {
							type: "object",
							properties: {
								code: { type: "string" },
								name: { type: "string" },
								currencies: { type: "array", items: { type: "string" } },
								capital: { type: "string" },
							},
							additionalProperties: false,
							required: ["code", "name", "currencies"],
						},
					},
					additionalProperties: false,
				},
			},
			additionalProperties: false,
		},
		operationType: "QUERY",
		description: "",
	},
	"todos/getAllTodosForCurrentUser": {
		input: {
			type: "object",
			properties: { userId: { type: "string" } },
			additionalProperties: false,
			required: ["userId"],
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						db_findManyTodo: {
							type: "array",
							items: {
								type: "object",
								properties: { id: { type: "string" }, text: { type: "string" }, isCompleted: { type: "boolean" } },
								additionalProperties: false,
								required: ["id", "text", "isCompleted"],
							},
						},
					},
					additionalProperties: false,
					required: ["db_findManyTodo"],
				},
			},
			additionalProperties: false,
		},
		operationType: "QUERY",
		description: "",
	},
	"openai/extract-website-metadata": {
		input: {
			type: "object",
			properties: { url: { type: "string" } },
			required: ["url"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						title: { type: "string" },
						h1: { type: "string" },
						summary: { type: "string" },
						description: { type: "string" },
						links: { type: "array", items: { type: "string" } },
					},
					required: ["description", "h1", "links", "summary", "title"],
				},
			},
		},
		operationType: "QUERY",
		description: "Load metadata like title, description, social media images, headlines, and summary from a website",
	},
	"openai/load-url": {
		input: {
			type: "object",
			properties: { url: { type: "string" } },
			required: ["url"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: {
			type: "object",
			properties: { data: { type: "object", properties: { content: { type: "string" } }, required: ["content"] } },
		},
		operationType: "QUERY",
		description: "Load the content of a url",
	},
	"openai/summarize-url-content": {
		input: {
			type: "object",
			properties: { url: { type: "string" } },
			required: ["url"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: {
			type: "object",
			properties: { data: { type: "object", properties: { summary: { type: "string" } }, required: ["summary"] } },
		},
		operationType: "QUERY",
		description: "Summarize the content of a URL",
	},
	"openai/summary": {
		input: {
			type: "object",
			properties: { url: { type: "string" } },
			required: ["url"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: {
			type: "object",
			properties: { data: { type: "object", properties: { summary: { type: "string" } }, required: ["summary"] } },
		},
		operationType: "QUERY",
		description: "Summarize the content of a URL",
	},
	"openai/weather": {
		input: {
			type: "object",
			properties: { country: { type: "string" } },
			required: ["country"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						structuredOutput: { $ref: "#/definitions/{country:string;city:string;temperature:number;}" },
						messages: { type: "array", items: { $ref: "#/definitions/ChatCompletionRequestMessage" } },
					},
					required: ["messages", "structuredOutput"],
					definitions: {
						"{country:string;city:string;temperature:number;}": {
							type: "object",
							properties: { country: { type: "string" }, city: { type: "string" }, temperature: { type: "number" } },
							required: ["city", "country", "temperature"],
						},
						ChatCompletionRequestMessage: {
							type: "object",
							properties: {
								role: {
									description: "The role of the messages author. One of `system`, `user`, `assistant`, or `function`.",
									type: "{string}",
								},
								content: {
									description:
										"The contents of the message. `content` is required for all messages except assistant messages with function calls.",
									type: "{string}",
								},
								name: {
									description:
										"The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.",
									type: "{string}",
								},
								function_call: { type: "{ChatCompletionRequestMessageFunctionCall}" },
							},
							required: ["role"],
						},
					},
				},
			},
		},
		operationType: "QUERY",
		description: "This operation returns the weather of the capital of the given country",
	},
	"users/get": {
		input: {
			type: "object",
			properties: { id: { type: "string" } },
			required: ["id"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						id: { type: "string" },
						name: { type: "string", default: "Jens" },
						bio: { type: "string", default: "Founder of WunderGraph" },
					},
					required: ["bio", "id", "name"],
				},
			},
		},
		operationType: "QUERY",
		description: "generated/bundle/operations/users/get",
	},
	"todos/addTodo": {
		input: {
			type: "object",
			properties: { text: { type: "string" }, userId: { type: "string" } },
			additionalProperties: false,
			required: ["text", "userId"],
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						db_createOneTodo: {
							type: "object",
							properties: {
								id: { type: "string" },
								text: { type: "string" },
								user: {
									type: "object",
									properties: { id: { type: "string" }, name: { type: "string" } },
									additionalProperties: false,
									required: ["id"],
								},
							},
							additionalProperties: false,
							required: ["id", "text", "user"],
						},
					},
					additionalProperties: false,
				},
			},
			additionalProperties: false,
		},
		operationType: "MUTATION",
		description: "",
	},
	"todos/updateTodo": {
		input: {
			type: "object",
			properties: { id: { type: "string" }, text: { type: "string" }, isCompleted: { type: "boolean" } },
			additionalProperties: false,
			required: ["id", "text", "isCompleted"],
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						db_updateOneTodo: {
							type: "object",
							properties: { id: { type: "string" }, text: { type: "string" }, isCompleted: { type: "boolean" } },
							additionalProperties: false,
							required: ["id", "text", "isCompleted"],
						},
					},
					additionalProperties: false,
				},
			},
			additionalProperties: false,
		},
		operationType: "MUTATION",
		description: "",
	},
	"users/update": {
		input: {
			type: "object",
			properties: { id: { type: "string" }, name: { type: "string" }, bio: { type: "string" } },
			required: ["id", "name", "bio"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: { name: { type: "string" }, id: { type: "string" }, bio: { type: "string" } },
					required: ["bio", "id", "name"],
				},
			},
		},
		operationType: "MUTATION",
		description: "generated/bundle/operations/users/update",
	},
	"users/subscribe": {
		input: {
			type: "object",
			properties: { id: { type: "string" } },
			required: ["id"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						id: { type: "string" },
						name: { type: "string", default: "Jens" },
						bio: { type: "string", default: "Founder of WunderGraph" },
						time: { type: "string" },
					},
					required: ["bio", "id", "name", "time"],
				},
			},
		},
		operationType: "SUBSCRIPTION",
		description: "generated/bundle/operations/users/subscribe",
	},
};

export type QueryNames =
	| "countries/CountryByCode"
	| "todos/getAllTodosForCurrentUser"
	| "openai/extract-website-metadata"
	| "openai/load-url"
	| "openai/summarize-url-content"
	| "openai/summary"
	| "openai/weather"
	| "users/get";

export type MutationNames = "todos/addTodo" | "todos/updateTodo" | "users/update";

export type SubscriptionNames = "users/subscribe";

export default jsonSchema;
