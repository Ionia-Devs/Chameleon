// Code generated by wunderctl. DO NOT EDIT.

import type {
  InternalClient as BaseClient,
  OperationArgsWithInput,
} from '@wundergraph/sdk/server'

import {
  CountriesCountryByCodeInput,
  CountriesCountryByCodeInputInjected,
  CountriesCountryByCodeInputInternal,
  CountriesCountryByCodeResponse,
  CountriesCountryByCodeResponseData,
  OpenaiExtract_website_metadataInput,
  OpenaiExtract_website_metadataInputInternal,
  OpenaiExtract_website_metadataResponse,
  OpenaiExtract_website_metadataResponseData,
  OpenaiLoad_urlInput,
  OpenaiLoad_urlInputInternal,
  OpenaiLoad_urlResponse,
  OpenaiLoad_urlResponseData,
  OpenaiSummarize_url_contentInput,
  OpenaiSummarize_url_contentInputInternal,
  OpenaiSummarize_url_contentResponse,
  OpenaiSummarize_url_contentResponseData,
  OpenaiSummaryInput,
  OpenaiSummaryInputInternal,
  OpenaiSummaryResponse,
  OpenaiSummaryResponseData,
  OpenaiWeatherInput,
  OpenaiWeatherInputInternal,
  OpenaiWeatherResponse,
  OpenaiWeatherResponseData,
  TodosAddTodoInput,
  TodosAddTodoInputInjected,
  TodosAddTodoInputInternal,
  TodosAddTodoResponse,
  TodosAddTodoResponseData,
  TodosGetAllTodosForCurrentUserInput,
  TodosGetAllTodosForCurrentUserInputInjected,
  TodosGetAllTodosForCurrentUserInputInternal,
  TodosGetAllTodosForCurrentUserResponse,
  TodosGetAllTodosForCurrentUserResponseData,
  TodosUpdateTodoInput,
  TodosUpdateTodoInputInjected,
  TodosUpdateTodoInputInternal,
  TodosUpdateTodoResponse,
  TodosUpdateTodoResponseData,
  UsersGetInput,
  UsersGetInputInternal,
  UsersGetResponse,
  UsersGetResponseData,
  UsersSubscribeInput,
  UsersSubscribeInputInternal,
  UsersSubscribeResponse,
  UsersSubscribeResponseData,
  UsersUpdateInput,
  UsersUpdateInputInternal,
  UsersUpdateResponse,
  UsersUpdateResponseData,
} from './models'
import type { OperationErrors } from './ts-operation-errors'

export interface Queries {
  CountriesCountryByCode: (
    options: OperationArgsWithInput<CountriesCountryByCodeInputInternal>
  ) => Promise<{
    data?: CountriesCountryByCodeResponse['data']
    errors?: Required<CountriesCountryByCodeResponse>['errors']
  }>
  TodosGetAllTodosForCurrentUser: (
    options: OperationArgsWithInput<TodosGetAllTodosForCurrentUserInputInternal>
  ) => Promise<{
    data?: TodosGetAllTodosForCurrentUserResponse['data']
    errors?: Required<TodosGetAllTodosForCurrentUserResponse>['errors']
  }>
  OpenaiExtract_website_metadata: (
    options: OperationArgsWithInput<OpenaiExtract_website_metadataInputInternal>
  ) => Promise<{
    data?: OpenaiExtract_website_metadataResponseData
    errors?: OperationErrors['openai/extract-website-metadata'][]
  }>
  OpenaiLoad_url: (
    options: OperationArgsWithInput<OpenaiLoad_urlInputInternal>
  ) => Promise<{
    data?: OpenaiLoad_urlResponseData
    errors?: OperationErrors['openai/load-url'][]
  }>
  OpenaiSummarize_url_content: (
    options: OperationArgsWithInput<OpenaiSummarize_url_contentInputInternal>
  ) => Promise<{
    data?: OpenaiSummarize_url_contentResponseData
    errors?: OperationErrors['openai/summarize-url-content'][]
  }>
  OpenaiSummary: (
    options: OperationArgsWithInput<OpenaiSummaryInputInternal>
  ) => Promise<{
    data?: OpenaiSummaryResponseData
    errors?: OperationErrors['openai/summary'][]
  }>
  OpenaiWeather: (
    options: OperationArgsWithInput<OpenaiWeatherInputInternal>
  ) => Promise<{
    data?: OpenaiWeatherResponseData
    errors?: OperationErrors['openai/weather'][]
  }>
  UsersGet: (
    options: OperationArgsWithInput<UsersGetInputInternal>
  ) => Promise<{
    data?: UsersGetResponseData
    errors?: OperationErrors['users/get'][]
  }>
}

export interface Mutations {
  TodosAddTodo: (
    options: OperationArgsWithInput<TodosAddTodoInputInternal>
  ) => Promise<{
    data?: TodosAddTodoResponse['data']
    errors?: Required<TodosAddTodoResponse>['errors']
  }>
  TodosUpdateTodo: (
    options: OperationArgsWithInput<TodosUpdateTodoInputInternal>
  ) => Promise<{
    data?: TodosUpdateTodoResponse['data']
    errors?: Required<TodosUpdateTodoResponse>['errors']
  }>
  UsersUpdate: (
    options: OperationArgsWithInput<UsersUpdateInputInternal>
  ) => Promise<{
    data?: UsersUpdateResponseData
    errors?: OperationErrors['users/update'][]
  }>
}

export interface InternalClient extends BaseClient<Queries, Mutations> {}
