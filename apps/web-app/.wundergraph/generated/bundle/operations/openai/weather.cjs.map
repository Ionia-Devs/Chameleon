{
  "version": 3,
  "sources": ["../../../../operations/openai/weather.ts", "../../../wundergraph.factory.ts"],
  "sourcesContent": ["// .wundergraph/operations/openai/weather.ts\nimport { createOperation, z } from \"../../generated/wundergraph.factory\"\n\nexport default createOperation.query({\n  input: z.object({\n    country: z.string(),\n  }),\n  description:\n    \"This operation returns the weather of the capital of the given country\",\n  handler: async ({ input, openAI, log }) => {\n    const parsed = await openAI.parseUserInput({\n      userInput: input.country,\n      schema: z.object({\n        country: z.string().nonempty(),\n      }),\n    })\n\n    const agent = openAI.createAgent({\n      functions: [\n        { name: \"countries/CountryByCode\" },\n        { name: \"weather/GetCityByName\" },\n      ],\n      structuredOutputSchema: z.object({\n        city: z.string(),\n        country: z.string(),\n        temperature: z.number(),\n      }),\n    })\n\n    const out = await agent.execWithPrompt({\n      prompt: `What's the weather like in fahrenheit in the capital of ${parsed.country}?`,\n      debug: true,\n    })\n\n    return out\n  },\n})\n", "// Code generated by wunderctl. DO NOT EDIT.\n\nimport type { InternalClient } from \"./wundergraph.internal.client\";\nimport type { InternalOperationsClient } from \"./wundergraph.internal.operations.client\";\nimport type { ORM } from './orm'\nimport type { Role } from \"./wundergraph.server\";\nimport type { CustomClaims } from \"./claims\";\nimport { createOperationFactory } from \"@wundergraph/sdk/operations\";\n\n\nimport type server from '../wundergraph.server';\n\ntype ContextField = Required<Required<Required<typeof server>['context']>['request']>['create'];\nexport type ContextType = ContextField extends (...args: any) => any ? Awaited<ReturnType<ContextField>> : never;\n\n\n\nimport type { Queries, Mutations } from \"./jsonschema\";\nimport type { IOpenaiAgentFactory } from \"@wundergraph/sdk/openai\"\nexport type QueriesAndMutations = Queries & Mutations;\nexport type OpenApiAgentFactory = IOpenaiAgentFactory<QueriesAndMutations>;\n\nexport { z, AuthorizationError } from \"@wundergraph/sdk/operations\";\nexport const createOperation = createOperationFactory<InternalClient, Role, CustomClaims, InternalOperationsClient, ORM, OpenApiAgentFactory, ContextType>();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACOA,wBAAuC;AAevC,IAAAA,qBAAsC;AAC/B,IAAM,sBAAkB,0CAA4H;;;ADpB3J,IAAO,kBAAQ,gBAAgB,MAAM;AAAA,EACnC,OAAO,qBAAE,OAAO;AAAA,IACd,SAAS,qBAAE,OAAO;AAAA,EACpB,CAAC;AAAA,EACD,aACE;AAAA,EACF,SAAS,OAAO,EAAE,OAAO,QAAQ,IAAI,MAAM;AACzC,UAAM,SAAS,MAAM,OAAO,eAAe;AAAA,MACzC,WAAW,MAAM;AAAA,MACjB,QAAQ,qBAAE,OAAO;AAAA,QACf,SAAS,qBAAE,OAAO,EAAE,SAAS;AAAA,MAC/B,CAAC;AAAA,IACH,CAAC;AAED,UAAM,QAAQ,OAAO,YAAY;AAAA,MAC/B,WAAW;AAAA,QACT,EAAE,MAAM,0BAA0B;AAAA,QAClC,EAAE,MAAM,wBAAwB;AAAA,MAClC;AAAA,MACA,wBAAwB,qBAAE,OAAO;AAAA,QAC/B,MAAM,qBAAE,OAAO;AAAA,QACf,SAAS,qBAAE,OAAO;AAAA,QAClB,aAAa,qBAAE,OAAO;AAAA,MACxB,CAAC;AAAA,IACH,CAAC;AAED,UAAM,MAAM,MAAM,MAAM,eAAe;AAAA,MACrC,QAAQ,2DAA2D,OAAO;AAAA,MAC1E,OAAO;AAAA,IACT,CAAC;AAED,WAAO;AAAA,EACT;AACF,CAAC;",
  "names": ["import_operations"]
}
