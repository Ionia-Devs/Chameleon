name: CI
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Restore cached npm dependencies
        id: cache-dependencies-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
            ~/.cache/Playwright
          key: npm-dependencies-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm install --frozen-lockfile
      - name: Cache npm dependencies
        id: cache-dependencies-save
        uses: actions/cache/save@v3
        with:
          path: |
            node_modules
            ~/.cache/Playwright
          key: ${{ steps.cache-dependencies-restore.outputs.cache-primary-key }}
      - uses: nrwl/nx-set-shas@v3
      # This line is needed for nx affected to work when CI is running on a PR
      - run: git branch --track main origin/main

      - name: Run NX Affected Commands
        id: nx-affected
        run: |
          echo "::set-output name=result::$(pnpm nx affected -t test,build --parallel=3 --configuration=ci 2>&1)"
          echo "NX_RESULT<<EOF" # Start multi-line output
          pnpm nx affected -t test,build --parallel=3 --configuration=ci 2>&1
          echo "EOF" # End multi-line output
        continue-on-error: true

      - name: Update or Create Comment
        uses: actions/github-script@v6
        env: # Use environment variables to pass data
          NX_RESULT: ${{ steps.nx-affected.outputs.result }}
          NX_OUTCOME: ${{ job.status }} # This can be 'success', 'failure', or 'cancelled'
        with:
          script: |
            const result = process.env.NX_RESULT;
            const outcome = process.env.NX_OUTCOME;
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const identifier = 'CI-Results-Update'; // Unique identifier for the comment
            const header = `<!-- ${identifier} -->\n`; // Makes identifying the comment easier
            const body = header + (outcome === 'success' ? '🎉 Build succeeded!' : '❌ Build failed:') + '\n```' + result + '```';

            const comments = await github.rest.issues.listComments({
              issue_number,
              owner,
              repo,
            });

            const existingComment = comments.data.find(comment => comment.body.startsWith(header));

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner,
                repo,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number,
                owner,
                repo,
                body,
              });
            }
