name: PlanetScale Database Deployment

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  actions: read
  contents: read

jobs:
  deploy-schema:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Node.js version 18.19.0
      - uses: actions/setup-node@v3
        with:
          node-version: '18.19.0'

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Set the BASE and HEAD SHA for Nx
      - uses: nrwl/nx-set-shas@v3

      # Optionally track the main branch if running on a PR
      - run: git branch --track main origin/main

      # Determine affected projects
      - name: Determine affected projects
        run: |
          result=$(pnpm exec nx show projects --affected --json)
          echo "$result"

      # Conditional steps based on the affected projects
      - if: contains(env.projects, 'data-access/db')
        name: Setup pscale
        uses: planetscale/setup-pscale-action@v1

      - if: contains(env.projects, 'data-access/db')
        name: Set PlanetScale branch name
        run: echo "PSCALE_BRANCH_NAME=$(echo ${{ github.head_ref }} | tr -cd '[:alnum:]-'| tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - if: contains(env.projects, 'data-access/db')
        name: Handle PlanetScale branch
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
        run: |
          set +e
          pscale branch show ${{ secrets.PLANETSCALE_DATABASE_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --org ${{ secrets.PLANETSCALE_ORG_NAME }}
          exit_code=$?
          set -e
          if [ $exit_code -ne 0 ]; then
            pscale branch create ${{ secrets.PLANETSCALE_DATABASE_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --org ${{ secrets.PLANETSCALE_ORG_NAME }} --wait
          fi

      - if: contains(env.projects, 'data-access/db')
        name: Submit deploy request
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
        run: |
          pscale deploy-request create ${{ secrets.PLANETSCALE_DATABASE_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --org ${{ secrets.PLANETSCALE_ORG_NAME }}

      # Optional: Additional steps like notifying team members, logging, etc.
