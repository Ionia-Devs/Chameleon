name: Prisma Schema Update on PlanetScale

on:
  pull_request:
    paths:
      - 'data-access/db/prisma/schema.prisma'
    types: [opened, closed, synchronize]

jobs:
  update_schema:
    runs-on: ubuntu-latest
    if: github.event.pull_request.state == 'open'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set branch name
        run: echo "PSCALE_BRANCH_NAME=$(echo '${{ github.head_ref }}' | tr -cd '[:alnum:]-' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Create a new database branch
        uses: planetscale/create-branch-action@v4
        with:
          org_name: ${{ secrets.ORG_NAME }}
          database_name: ${{ secrets.DB_NAME }}
          branch_name: ${{ env.PSCALE_BRANCH_NAME }}
          check_exists: true
          wait: true
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}

      - name: Create a password
        uses: planetscale/create-branch-password-action@v3
        with:
          org_name: ${{ secrets.ORG_NAME }}
          database_name: ${{ secrets.DB_NAME }}
          branch_name: ${{ env.PSCALE_BRANCH_NAME }}
          name: 'pass-${{ env.PSCALE_BRANCH_NAME }}-${{ github.run_id }}'
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
        id: create_password

      - name: Override DATABASE_URL
        run: |
          DATABASE_URL_VALUE="mysql://${{ steps.create_password.outputs.username }}:${{ steps.create_password.outputs.password }}@${{ steps.create_password.outputs.hostname }}/${{ secrets.DB_NAME }}?sslaccept=strict"
          echo "Constructed DATABASE_URL: $DATABASE_URL_VALUE"
          echo "DATABASE_URL=$DATABASE_URL_VALUE" >> $GITHUB_ENV

      - name: Echo DATABASE_URL
        run: echo "DATABASE_URL is set to '$DATABASE_URL'"

      - name: Push schema changes to database
        run: npx prisma db push --schema=./data-access/db/prisma/schema.prisma --skip-generate
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Comment PR with Database Update Details
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Database branch and deploy request created successfully ðŸŽ‰

            * ðŸŒ¿ DB-Branch: `branch-name`
            * ðŸš€ Deploy request: [Link to deploy request](#)
            * ðŸ”— Branch connection info: [One-time link](#)

            â–¼ Proposed DDL-Statements:
            ```
            alter table pixel_matrix drop column operation; drop index environment_operation on pixel_matrix;
            ```

            â–¼ Calculated schema changes:
            ```
            CREATE TABLE `pixel_matrix` (
              `id` bigint NOT NULL AUTO_INCREMENT,
              `environment` varchar(10) NOT NULL,
              `cell` varchar(10) NOT NULL,
              `pixel_data` longtext NOT NULL,
              `operation` varchar(10) DEFAULT NULL,
              PRIMARY KEY (`id`),
              KEY `environment` (`environment`),
              KEY `cell` (`cell`),
              KEY `environment_operation` (`environment`,`operation`)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            ```

  merge_changes:
    runs-on: ubuntu-latest
    if: github.event.pull_request.state == 'closed' && github.event.pull_request.merged == true
    needs: update_schema

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create a deploy request
        uses: planetscale/create-deploy-request-action@v2
        with:
          org_name: ${{ secrets.ORG_NAME }}
          database_name: ${{ secrets.DB_NAME }}
          branch_name: ${{ github.head_ref }}
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}

      - name: Deploy the deploy request
        uses: planetscale/deploy-deploy-request-action@v4
        with:
          org_name: ${{ secrets.ORG_NAME }}
          database_name: ${{ secrets.DB_NAME }}
          number: ${{ steps.create_deploy_request.outputs.number }}
          wait: true
        env:
          PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
          PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
