generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  interests      String?
  specialization String?
  portfolio      Json?
  availability   Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  Account Account[]
  Session Session[]
  Todo    Todo[]
  Post    Post[]
  UserSkill UserSkill[]
  CurrentShoots CurrentShoots[]

  @@index([id], name: "idx_user_id")
}

model CurrentShoots {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSkill {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  isHighlighted Boolean @default(false)

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Todo {
  id          String   @id @default(cuid())
  text        String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])
}
